-load i18n

:css
  .errors {
    margin: 20px;
  }

  .rule-editor .modal-body input.url {
    width: 485px;
  }

  label[for="new_format"] {
    display: inline-block;
  }

.modal-header.title
  %span{ng-model:"formData.rulesetConfig", data-icon:"show", class:"modal-title ruleset-name"}><
.modal-body.split-editor

  .ng-form{name:"splitEditor"}

    .split-header
      .split-choice.pull-left
        %p
          -blocktrans
            When somebody arrives at this point in your flow
        %select{ng-model:"formData.rulesetConfig", ng-change:"rulesetTypeChanged()", ng-options:"config as config.verbose_name for config in rulesetConfigs|filter:isVisibleRulesetType",style:"width:320px;height:34px",class:"split-type",select2:""}

      %form{name:"variable"}
        #variable-name
          .message
            -trans "Save result as"
          %input{ng-model:"ruleset.label",name:"label",alphanum:"",ng-required:"true",type:"text",id:"label-name", maxlength:"64"}
          .error.ng-hide{ng-show:"variable.$error.alphanum"}
            -trans "The response name must consist of only letters and numbers."
    .errors{ng-if:'invalidFields.length > 0'}
      -include 'partials/invalid_fields.haml'   

    .wait-ussd{ng-if:'formData.rulesetConfig.type == "wait_menu"', ussd:0}
    .wait-ussd{ng-if:'formData.rulesetConfig.type == "wait_ussd"', ussd:1}

    .response{ng-if:'formData.rulesetConfig.type == "wait_message"'}><
      #split-on
        -trans "If the message response..."

    .subflow{ng-if:'formData.rulesetConfig.type == "subflow"'}><
      .split-margin
        %p{class:"description"}
          -blocktrans
            Call out to another flow and return the results to this flow in the @child variable.
        %input{style:"width:620px",ng-model:"formData.flow",search:"true",init-text:"[[formData.flow.name]]",name:"flow",placeholder:"Select the flow to run",required:"",init-id:"[[formData.flow.uuid]]",select-server:"[[getFlowsUrl()]]",type:"hidden"}

    .expression{ng-if:'formData.rulesetConfig.type == "expression"'}><
      #split-on
        -trans "If the expression "
        %input{ng-model:"ruleset.operand",type:"text", auto-complete:"true", class:"split-operand", maxlength:"128"}

    .flow-field{ng-if:'formData.rulesetConfig.type == "flow_field"'}><
      #split-on
        -trans "If the flow field "
        %select{ name:'flowField', required:"true", ng-model:"formData.flowField", ng-options:"field as field.text for field in flowFields"}

    .form-field{ng-if:'formData.rulesetConfig.type == "form_field"'}><
      #split-on
        -trans "If the"
        %select.field-index{ name:'fieldIndex', ng-model:'formData.fieldIndex', required:'true', ng-options: 'index as index.text for index in fieldIndexOptions'}
        -trans "field in"
        %select{ name:'flowField', required:'true', ng-model:'formData.flowField', ng-options:"field as field.text for field in flowFields"}
        -trans "delimited by a"
        %select.field-delimiter{ name:'fieldDelimiter', ng-model:'formData.fieldDelimiter', required:'true', ng-options: 'delim as delim.text for delim in fieldDelimiterOptions'}

    .contact-field{ng-if:'formData.rulesetConfig.type == "contact_field"'}><
      #split-on
        -trans "If the contact field "
        %select{name:'contactField', required:"true", ng-model:"formData.contactField", ng-options:"field as field.text for field in contactFields"}

    .wait-digits{ng-if:'formData.rulesetConfig.type == "wait_digits"'}><
      #split-on
        -trans "If the keypad entry before the # symbol.."

    .random{ng-if:'formData.rulesetConfig.type == "random"'}><
      #split-on
        -trans "Split them randomly into"
        %input.split-buckets{min:"2", max:"20", ng-change:'updateRandomBuckets()', ng-model:"formData.buckets", ng-required:"true", type:"number"}
        -trans "even buckets"

        .buckets
          .bucket{ng-repeat:'bucket in formData.randomBuckets'}
            %input{type:'text', ng-required:'true', ng-model:'bucket._base'}

    .group-membership{ng-if:'formData.rulesetConfig.type == "group"'}><
      .split-margin
        %p{class:"description"}
          -trans "Select all the groups you would like to split by below"
        %input{style:"height:38px; width:620px",ng-model:"formData.omnibox", name:"omnibox",required:"",omnibox:'{"types":"g", "sortable":true, "arbitraryAdd":true, "completions":false, "allowExtra": true}',groups:"formData.groups",type:"hidden"}

    .airtime{ng-if:'formData.rulesetConfig.type == "airtime"'}><
      .split-margin
        %p{class:"description"}
          -blocktrans
            You can configure the amount of the airtime in local currency to send
            for each country you have a channel for.

        .country-config{ng-repeat:"option in formData.airtimeAmountConfig"}
          .country
            [[option.name]] ([[option.currency_code]])
          %input.airtime-amount{ng-model:"option.amount", ng-required:"true", type:"number"}

    .resthook{ng-if:'formData.rulesetConfig.type == "resthook"'}><
      .split-margin
        %p{class:"description"}
          -blocktrans
            Select which flow event you want to notify Zapier of below. You can configure your flow events
            on your account page.

        %input{ng-model:"formData.resthook", search:"true", init-text:"[[ruleset.config.resthook]]", name:"resthook",
               placeholder:"Select the flow event to notify subscribers of", required:"", init-id:"[[ruleset.config.resthook]]",
               select-server:"/api/resthooks/?_format=select2", type:"hidden"}

    .webhook{ng-if:'formData.rulesetConfig.type == "webhook"'}><
      .split-margin          
        %p{class:"description"}
          -blocktrans
            Using a Webhook you can fetch data from an external database
            and use it in this flow.
            Enter the URL to call out to at this point in the flow.
        
        -include 'partials/invalid_fields.haml'
        %select{ng-model:"formData.webhook_action",ng-options:"method for method in methods",style:"height:34px;width:95px",class:"method",select2:""}
        %input{ng-model:"formData.webhook",placeholder:"http://yourwebsite.com/endpoint",auto-complete:"",ng-required:"true",type:"url",class:"url"}

        .help-text
          %a.additional-options{href:"javascript:;",ng-click:"webhookAdditionalOptions()",ng-show:"!formData.isWebhookAdditionalOptionsVisible"}
            -trans "Additional options"

        .webhook-headers{ng-show:"formData.isWebhookAdditionalOptionsVisible"}
          .modal-webhook-header-pair
            .modal-webhook-header.modal-webhook-header-name
              .message
                .help-text
                  -trans "Header Name"
            .modal-webhook-header.modal-webhook-header-value
              .message
                .help-text
                  -trans "Header Value"
          .modal-webhook-header-pair{ng-repeat:"header in formData.webhook_headers"}
            .modal-webhook-header.modal-webhook-header-name
              %input{type:"text",name:"webhook-name",ng-model:"header.name"}
            .modal-webhook-header.modal-webhook-header-value
              %input{type:"text",name:"webhook-value",ng-model:"header.value"}
            .modal-webhook-header.modal-webhook-header-remove
              .icon.icon-close{ng-click:"removeWebhookHeader($index)"}

          .help-text
            %a.add-header{href:"javascript:;",ng-click:"addNewWebhookHeader()"}
              -trans "Add header"

        .div
          .help-text{ng-show:'formData.webhook_action == "POST"'}
            -blocktrans
              We'll include the message text along with data specified in the
              %a{href:"/webhooks/webhook/#flow", target:"_new"}<
                Webhook Flow Event API
              . This step will be identified as [[ruleset.uuid]]

          %p
          %p{class:"description response"}
            -blocktrans
              If your server responds with JSON, each property will be added
              to the flow.

          .example
            .code
              &#x7B;
              %br
              &nbsp;&nbsp;product: "Solar charging kit",
              %br
              &nbsp;&nbsp;stock_level: 32
              %br
              &#x7D;

          .help-text
            -blocktrans
              In this example @extra.product and @extra.stock_level would be
              added for all future steps.

    %span{ng-if:'formData.rulesetConfig.type == "wait_digit"'}
      %form{name:"menu",class:"ivr-menu"}
        .option{class:'option-[[option.number]]', ng-repeat:"option in numbers"}
          .number
            [[option.number]]
          %input{ng-model:"option.category._base",type:"text"}

    // RULE EDITOR
    %form{name:'ruleForm'}
      %span{ng-if:'hasRules() && formData.rulesetConfig.type != "wait_menu"'}
        %div{ui-sortable:"sortableOptions",ng-model:"ruleset.rules"}
          .rule{ng-repeat:"rule in ruleset.rules track by rule.uuid", ng-show:"isRuleVisible(rule)"}

            <ng-form name="inner">
              .icon.icon-menu
              %select{ng-model:"rule._config",ng-options:'operator as operator.verbose_name for operator in operatorConfigs|filter:isVisibleOperator', class:"operator-select",ng-change:"updateCategory(rule)"}

              // between and ward are the only with two operands
              .operation{ng-if:'rule._config.operands == 2 && rule._config.type != "ward"'}
                %input{ng-model:"rule.test.min",name:"min",number:"",ng-required:"rule.test.min.length > 0 || rule.test.max.length > 0 || rule.category._base.length > 0",ng-change:"updateCategory(rule)",lower-than:"[[rule.test.max]]",type:"text",class:"operand-small"}
                -trans "and"
                %input{ng-model:"rule.test.max", name:"max",number:"",ng-required:"rule.test.min.length > 0 || rule.test.max.length > 0 || rule.category._base.length > 0",ng-change:"updateCategory(rule)",type:"text",class:"operand-small"}

              // ward level
              .operation{ng-if:'rule._config.operands == 2 && rule._config.type == "ward"'}
                %input{ng-model:"rule.test.state",name:"state",ng-change:"updateCategory(rule)",type:"text",class:"operand-small", placeholder:"@flow.state", auto-complete:"rule._config.auto_complete",flow:"[[flowId]]", uuid:"[[ruleset.uuid]]", ng-required:"rule.category._base"}
                -trans "and"
                %input{ng-model:"rule.test.district", name:"district",ng-change:"updateCategory(rule)",type:"text",class:"operand-small", placeholder:"@flow.district", auto-complete:"rule._config.auto_complete",flow:"[[flowId]]", uuid:"[[ruleset.uuid]]", ng-required:"rule.category._base"}


              // single operand based rules that aren't dates
              .operation{ng-if:'rule._config.operands == 1 && rule._config.validate !="date"'}
                %input{ng-model:"rule.test._base",name:"operand",placeholder:"[[rule._config.placeholder]]",auto-complete:"rule._config.auto_complete",flow:"[[flowId]]",ng-required:"rule.category._base",ng-change:"updateCategory(rule)",type:"text",class:"operand",validate-type:"[[rule._config.type]]",uuid:"[[ruleset.uuid]]"}

              // single operand rules with relative dates
              .operation{ng-if:'rule._config.operands == 1 && rule._config.validate =="date"'}
                -trans "today +"
                %input{ng-change:"updateCategory(rule)",ng-model:"rule.test._base",name:"days",number:"",ng-required:"rule.category._base",type:"text",class:"operand-small"}
                -trans "days"
              .operation{ng-if:"rule._config.operands == 0"}
              .categorize
                -trans "categorize as"
                %input{ng-model:"rule.category._base",name:"category",ng-required:"rule._config.operands==0 || (rule._config.operands==1 && rule.test._base) || (rule._config.operands==2 && (rule.test.test.min || rule.test.test.max))",ng-change:"rule.category._autoName = false",type:"text",class:"category",maxlength:"36"}
              .icon.icon-close{ng-click:"remove(rule)"}
              .error{ng-show:"inner.min.$error.lowerThan"}
                -blocktrans
                  Invalid range, [[inner.min.$viewValue]] is not less than [[rule.test.max]]
              .error.ng-hide{ng-show:'inner.days.$error.number'}
                -trans "Enter a valid number of days."
              .error.ng-hide{ng-show:'inner.operand.$error.required'}
                -trans "Please enter a value for evaluating this rule."
              .error.ng-hide{ng-show:'inner.category.$error.required'}
                -trans "Please enter a category name."

.modal-footer
  .ussd-counter{ng-class:"{limit: characters < 0}", ng-if:'formData.rulesetConfig.type == "wait_menu" || formData.rulesetConfig.type == "wait_ussd"'}
    [[characters]] characters remaining

  .timeout{ng-show:'flow.type == "M" && isPausingRuleset()', style:'float:left'}

    %label
      %input{type:'checkbox', ng-model:'formData.hasTimeout'}

      %span{ng-show:'!formData.hasTimeout'}
        Continue when there is no response

      %span{ng-show:'formData.hasTimeout'}
        Continue when there is no response for
        %select{ng-model:'formData.timeout', ng-options:'option as option.text for option in formData.timeoutOptions'}

  <!--[[splitEditor]]-->
  %button{ng-click:"cancel()",class:"btn btn-secondary"}
    -trans "Cancel"
  %button{ng-disabled:'variable.$invalid || (hasRules() && ruleForm.$invalid) || splitEditor.$invalid || (characters && characters < 0)',ng-click:"okRules(splitEditor)",class:"btn btn-primary"}
    -trans "Ok"
