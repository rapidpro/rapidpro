- extends "frame.html"
- load smartmin i18n

- block page-top

-block page-title
  {{ brand.name }} - API WebHook

-block content
  -block breadcrumbs
    %ul.breadcrumb
      %li
        %a{href:"{% url 'api' %}"}><
          {%blocktrans with brand.name as brand%}{{ brand }} API{%endblocktrans%}
        %span.divider &raquo;

      %li
        %a.active{href:"{% url 'api.webhook' %}"} WebHook

      -if request.user.api_token
        %li.pull-right{style:"color: #666"}
          API Token: {{ request.user.api_token }}
      -else
        %li.pull-right Log in to get your API Token

  .page-header{ style: "position: relative;" }
    <a class="btn btn-primary pull-right" href='{% url "api.webhook_simulator" %}'>Simulator</a>
    %h1 WebHook

  :markdown
    The Web Hook allows you to configure {{ brand.name }} to send new events to your application.  Each time a new event occurs,
    {{ brand.name }} will make a POST request to the URL you configure with the body of the POST containing details on the event.
    While developing your application you may want to use the <a href="{% url 'api.webhook_simulator' %}">simulator</a> to
    test incoming events.

    ### Delivery URL

    For each channel you can configure a delivery URL that {{ brand.name }} will ```POST``` incoming messages to. You can include
    URL parameters in this URL to help identify that the request is indeed coming from {{ brand.name }}.

    ### Event Types

    The events that {{ brand.name }} will send to your webhook is as follows.  Note that this list may be expanded in the future so your
    web app should be tolerant to receiving new event types without causing errors.

  <table class="table table-events">
    <tr><td>mo_sms</td><td>An incoming message was received by the Android phone</td></tr>
    <tr><td>mt_sent</td><td>An outgoing message has been confirmed as sent by the Android phone</td></tr>
    <tr><td>mt_dlvd<td>The network has reported that an outgoing message was delivered to the final recipient</td></tr>
    <tr></tr>
    <tr><td>mo_miss</td><td>An incoming call was missed on the Android phone</td></tr>
    <tr><td>mo_call</td><td>An incoming call was picked up on the Android phone</td></tr>
    <tr><td>mt_call</td><td>An outgoing call was made on the Android phone</td></tr>
    <tr><td>mt_miss</td><td>An outgoing call was made but never picked up by the recipient</td></tr>
    <tr></tr>
    <tr><td>alarm</td><td>Your Android phone has either lost contact with {{ brand.name }} or is reporting a very low battery</td></tr>
    <tr></tr>
    <tr><td>flow</td><td>A user has reached an API action in one of your flows</td></tr>
  </table>

  %h3 Response Format

  :markdown

    Your web service should return a 200 or 201 status code to mark acceptance of the event.  If a 400 or 500 status
    code is returned then {{ brand.name }} will retry delivering the event up to three times.  You can view a log of recent events
    through your <a href='{% url "api.log" %}'>API Log</a> when logged in.

    Optionally, your web service can choose to respond to any event by returning a JSON response
    body using the same format as the <a href="{% url 'api.v1.messages' %}">Messages Endpoint</a>.  For example, your
    service could respond with the following JSON content to send a message to two contacts

        {
          "phone": ["+250788123123", "+250788123124"],
          "text": "Walk into the club like, whattup, I have a big clock"
        }

  %a{ name:"mo_sms" }
  :markdown

    ### Receiving SMS Messages

    Say you set your webhook URL to ```http://www.yourapp.com/app.php?password=akabanga```.  If your Android
    phone receives the text message "Im gonna pop some tags" from "+250788123132" then {{ brand.name }} will ```POST``` the following:

        POST http://www.yourapp.com/app.php?password=akabanga
        event=mo_sms&id=23554&channel=254&channel_phone=%2B250788111111&phone=%2B250788123123&text=Im+gonna+pop+some+tags&time=2013-01-01T05:34:34.034

  <table class="table table-params">
      <tr><td>event</td><td><code>mo_sms</code></td></tr>
      <tr><td>relayer</td><td>The id of the channel that received this message</td></tr>
      <tr><td>relayer_phone</td><td>The phone number of the channel that received this message</td></tr>
      <tr><td>sms</td><td>The id of this message</td></tr>
      <tr><td>phone</td><td>The E164 phone number of the sender of this message</td></tr>
      <tr><td>text</td><td>The text of the message, note that this may be longer than 160 characters as {{ brand.name }} will combine multipart messages</td></tr>
      <tr><td>status</td><td>The current status of this message, one of Q,S,D,E or F</td></tr>
      <tr><td>direction</td><td>The direction of the message, either I for incoming or O for outgoing</td></tr>
      <tr><td>time</td><td>The date and time that this message was received by the Android phone</td></tr>
  </table>


  %a{ name:"mt_sent" }
  %a{ name:"mt_dlvd" }
  :markdown

    ### Sent and Delivery Reports

    When you send messages to the {{ brand.name }} API you can also receive reports as to when your message was sent by your Android
    channel as well as when the message was delivered to the final recipient. (note that some messages may never receive
    delivery reports)  The sent and delivered events will be represented by the ```mt_sent``` and ```mt_dlvd``` events.

    Say you have sent the message "Only got $20 in my pocket" to "+250788383383".  When your Android phone has successfully
    sent the message, you will notified with the following message:

        POST http://www.yourapp.com/app.php?password=akabanga
        event=mt_sent&id=23555&relayer=254&relayer_phone=%2B250788111111&phone=%2B250788123123&text=Only+got+$20+in+my+pocket&time=2013-01-01T05:34:34.034

    <table class="table table-params">
        <tr><td>event</td><td><code>mt_sent</code> or <code>mt_dlvd</code></td></tr>
        <tr><td>relayer</td><td>The id of the channel that sent this message</td></tr>
        <tr><td>relayer_phone</td><td>The phone number of the channel that sent this message</td></tr>
        <tr><td>sms</td><td>The id of this message</td></tr>
        <tr><td>phone</td><td>The E164 phone number of the recipient of this message</td></tr>
        <tr><td>text</td><td>The text of the message, note that this may be longer than 160 characters as {{ brand.name }} will combine multipart messages</td></tr>
        <tr><td>status</td><td>The current status of this message, one of Q,S,D,E or F</td></tr>
        <tr><td>direction</td><td>The direction of the message, either I for incoming or O for outgoing</td></tr>
        <tr><td>time</td><td>The date and time that this message was sent or delivered</td></tr>
    </table>


  %a{ name:"mo_call" }
  %a{ name:"mo_miss" }
  %a{ name:"mt_call" }
  %a{ name:"mt_miss" }
  :markdown

    ### Call Events

    Although the {{ brand.name }} Android application cannot place or receive calls, it does log all inbound and outbound calls.  This
    is often used to record missed incoming calls and respond to them in some way.  {{ brand.name }} will send you these events as
    they occur, using the event types ```mo_miss```, ```mo_call```, ```mt_call``` and ```mt_miss```.

    Say your channel receives a missed call from "+250788383383", you will receive the following ```POST``` from {{ brand.name }}:

        POST http://www.yourapp.com/app.php?password=akabanga
        event=mo_miss&id=125156&relayer=254&relayer_phone=%2B250788111111&phone=%2B250788123123&time=2013-01-01T05:34:34.034&duration=0

    <table class="table table-params">
        <tr><td>event</td><td>One of <code>mo_miss</code>, <code>mo_call</code>, <code>mt_miss</code> or <code>mt_call</code></td></tr>
        <tr><td>relayer</td><td>The id of the channel that received this call</td></tr>
        <tr><td>relayer_phone</td><td>The phone number of the channel that received this call</td></tr>
        <tr><td>call</td><td>The id of this call</td></tr>
        <tr><td>phone</td><td>The E164 phone number of the caller or callee</td></tr>
        <tr><td>time</td><td>The date and time that this call took place</td></tr>
        <tr><td>duration</td><td>The length in seconds that this call lasted, 0 for missed calls</td></tr>
    </table>

  %a{ name:"alarm" }
  :markdown

    ### Alarm Events

    {{ brand.name }} keeps track of the status of your channels to make sure they are connected to the network, charged and able
    to send text messages.  In order to help you manage this state, {{ brand.name }} can send you events when an alarm condition
    occurs on one of your channels.

    Say that your channel hasn't contacted the {{ brand.name }} service in over 30 minutes.  We will ```POST``` the following to
    your webhook.

        POST http://www.yourapp.com/app.php?password=akabanga
        event=alarm&relayer=254&relayer_phone=%2B250788111111&battery=50&last_seen=2013-01-01T05:35:32.012&unsent=4

    <table class="table table-params">
        <tr><td>event</td><td><code>alarm</code></td></tr>
        <tr><td>relayer</td><td>The id of the channel that has a problem</td></tr>
        <tr><td>relayer_phone</td><td>The phone number of the channel that has a problem</td></tr>
        <tr><td>power_level</td><td>The battery level as of the channel as an int</td></tr>
        <tr><td>power_status</td><td>One of <code>CHARGING</code> or <code>DISCHARGING</code></td></tr>
        <tr><td>power_source</td><td>The source of power for the device</td></tr>
        <tr><td>network_type</td><td>What type of network the device is connected to</td></tr>
        <tr><td>pending_message_count</td><td>How many messages this channel still has unsent</td></tr>
        <tr><td>retry_message_count</td><td>How many messages this channel is currently retrying after a send error</td></tr>
        <tr><td>last_seen</td><td>The date and time that this channel last contacted the {{ brand.name }} server</td></tr>
    </table>

  %a{ name:"flow" }
  :markdown
    ### Flow Events

    If you choose to have your webhook called when a user reaches a particular point in a flow, this is the resulting
    event. You will receive the phone number of the contact, flow name and their state in the flow.

    Say that a user reaches an API node in a flow, we will ```POST``` the following to your webhook.

        POST http://www.yourapp.com/app.php?password=akabanga
        event=flow&relayer=254&relayer_phone=%2B250788111111&phone=%2B250788123123&flow=1524&step=12341234-1234-1234-1234-1234-12341234&values=[]

    <table class="table table-params">
        <tr><td>event</td><td><code>flow</code></td></tr>
        <tr><td>relayer</td><td>The id of the channel that is executing this flow</td></tr>
        <tr><td>relayer_phone</td><td>The phone number of the channel that is executing this flow</td></tr>
        <tr><td>phone</td><td>The phone number of the contact that has reached this point in the flow</td></tr>
        <tr><td>flow</td><td>The id of the flow that received an event (use the URL on your flow page for reference)</td></tr>
        <tr><td>step</td><td>The step that triggered this API call, use the flow step for reference</td></tr>
        <tr><td>values</td><td>The values collected from the user so far through this flow, in order of collection time</td></tr>
    </table>

    The values parameter will be JSON encoded in the following format:

        "values": [
          { "label": "Water Source", "category": "Stream", "text": "from stream", "value": "Stream", "time": "2013-01-01T05:35:32.012" },
          { "label": "Boil", "category": "Yes", "text": "yego", "value": "Yes", "time": "2013-01-01T05:36:54.012" },
          { "label": "Household Members", "category": "All", "value": "15", "text": "15", "time": "2013-01-01T05:58:32.012" }
        ]

     <table class="table table-params">
        <tr><td>label</td><td>The label for the rule set</td></tr>
        <tr><td>category</td><td>How the user's response was categorized</td></tr>
        <tr><td>value</td><td>The value that was parsed from the user's response, for example just the number in a numeric response"</td></tr>
        <tr><td>text</td><td>The full text of the user's response</td></tr>
        <tr><td>time</td><td>The time that the user responded, in JSON format: 2013-01-01T05:34:34.034</td></tr>
    </table>


-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}rest_framework/js/prettify-min.js"></script>
  <script>
    $(function(){
      $("pre").has("code").addClass("prettyprint");
      prettyPrint();
    });
  </script>


-block extra-style
  {{ block.super }}
  <link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}css/codemirror.css"/>
  <link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}rest_framework/css/prettify.css"/>

  :css
    .table-events td:first-child {
      font-family: monospace;
      text-align: right;
      width: 100px;
      color; black;
    }

    .table-params td:first-child {
      font-family: monospace;
      text-align: right;
      width: 100px;
      color; black;
    }

    .str, .atv {
       color: teal;
    }
