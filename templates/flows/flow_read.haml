{% extends "smartmin/base.html" %}

-load temba compress i18n

-block extra-style
  -load compress
  -compress css
    %link{type:'text/less', rel:'stylesheet', href:'{{STATIC_URL}}less/flows.less', media:'all'}
    %link{type:'text/less', rel:'stylesheet', href:'{{STATIC_URL}}less/simulator.less', media:'all'}

  -if object.flow_type == 'V'
    :css
      #simulator {
        #display:inline-block;
        #position:absolute;
        #top:250px;
        #right:40px;
        #padding:0;
        #margin:0;
      }

      #simulator .simulator-body {
        height: 372px;
        margin-top:-22px;
        margin-bottom:15px;
      }

      #simulator .simulator-footer, #simulator {
        display:none;
      }

      #simulator &.pinned-sim {
        position:fixed;
        top:70px;
        right:40px;
      }


-block extra-less
  -compress css inline
    {% lessblock %}
      :plain
        .translation {
          padding:10px;
          margin-right:10px;

          .language {
            text-decoration:underline;
            cursor: pointer;
            color: @color-links;

            &.active {
              text-decoration:none;
              cursor: default;
              color: #666;
            }
          }
        }

        .attn {
          color: #666;
          font-weight:500;
          padding-right:5px;
        }

        h2 .icon-phone {
          color: @flat-mutedblue;
          margin-right:30px;
        }

        .restart-participants .control-label {
          margin-bottom: 0px;
        }

        #id_restart_participants {
          width: 20px;
          vertical-align: baseline;
        }

        #id_restart_participants + .help-block {
          display: inline-block;
          color: #333;
        }
    {% endlessblock %}



-block page-container
  -include "msgs/msg_send_modal.html"
  -include "flows/simulator.html"
  #toolbar

    .call-status
      .icon-phone.hide
      .status
        -trans "Select a message to record"
      .duration

      %button.btn-danger.btn.btn-xs.hangup
        -trans "Done"

    .actions.pull-right

      -if base_language and flow.org.languages.all.count > 1
        .language.pull-left
          .name
            {{base_language.name}}
          .others
            %a{href:'{%url "flows.flow_editor" object.pk%}'}
              -trans "Translate"

      -include "gear_links_include.haml"

    %h2
      -if flow.flow_type == 'V'
        .icon-phone
      {{ flow.name }}

    #pending{style:"display:none;"}
      %div{class:"alert alert-info"}
        -blocktrans
          This flow is in the process of being sent, this message will disappear once all contacts have been added to the flow.

  #status
    #error
      .glyph.icon-warning
      -trans "Error Contacting Server. Changes may not be saved."

    #saving
      .throbber
        %img{ src: "{{ STATIC_URL }}images/loader-bars.gif" }

  #drag-helper.hide
    .tail
    .arrow.icon-arrow-down-2
    .help-text
      -trans "To make your next connection,"
      %span.attn
        -trans "drag"
      -trans "the red box."

  #workspace

  #show-simulator.btn.btn-primary
    .icon-mobile
    .message.hide
      -trans "Run in"
      %br
      -trans "Simulator"


  .toast.hide
    .message

  #templates.hide

    #tab-container.btn-group{data-toggle:'buttons-radio'}

    .sticky
      %a.close
        .glyph.icon-close
      %textarea.title.note-input
      %textarea.body.note-input

    .help
      .flow-create


      .handling-responses
        .help-container
          .intro
            -blocktrans
              Flows go back and forth between sending messages and receiving responses. In the last step, we sent
              a message, now we will handle the response to that message. After this, you will understand enough
              to build complex flows.

            %h4
              -trans "Name your variable"
            %p
              -blocktrans
                Each response is saved as a variable, so you will need to pick a name. If the previous question
                was
              %span.text
                -trans "Can you attend the training session on Saturday?"
              -trans "you might name it"
              %span.text
                -trans "Attend Training."

            %h4
              -trans "Categorize the response"

            %p
              -blocktrans
                You will now have a chance to branch your flow by category. This allows you to ask
                different follow-up questions based on how they respond.

            .examples
              %h4
                -trans "Some example categories"
              .category
                -trans "If response"
                %span.attn
                  -trans "has words"
                %span.text
                  -trans "can't attend"
                -trans "categorize as"
                %span.attn
                  -trans "No"

              .category
                -trans "If response"
                %span.attn
                  -trans "is between"
                %span.text
                  13
                %span.attn
                  -trans "and"
                %span.text
                  19
                -trans "categorize as"
                %span.attn
                  -trans "Teenager"

              .category
                -trans "If response"
                %span.attn
                  -trans "is more than"
                %span.text
                  70
                -trans "categorize as"
                %span.attn
                  -trans "Elderly"

    .action-options
      %select.select2#action-type
        -if object.flow_type == 'V'
          %option{value:'say'}
            -trans "Play message over the phone"
        %option{value:'send-response'}
          -trans "Send a message to the contact"
        %option{value:'send-message'}
          -trans "Send a message to somebody else"
        %option{value:'save-to-contact'}
          -trans "Update the contact"

        -if flow.org.primary_language
          %option{value:'lang'}
            -trans "Set language for the contact"

        %option{value:'add-to-group'}
          -trans "Add contact to a group"
        %option{value:'remove-from-group'}
          -trans "Remove contact from a group"
        %option{value:'send-email'}
          -trans "Send an e-mail"
        %option{value:'start-flow'}
          -trans "Place contact in another flow"
        %option{value:'trigger-flow'}
          -trans "Place somebody else in a flow"
        %option{value:'api'}
          -trans "Call Webhook"

    .node.actions
      .flow-start
        .title
          -trans "Flow Start"
      .activity.hide
      .actions
      .add-action.hide
        +
      .source

    .node.rules
      .flow-start
        .title
          -trans "Flow Start"
        // .icon-arrow-right-8
      .activity.hide
      .webhook.hide
        .name
          -trans "Webhook"
        .delete.hide
          -trans "Remove Webhook?"
        %a.close.hide
          .glyph.icon-close
        .url
      .ruleset
        %table{cellspacing:0, cellpadding:0}
          %tr
            %td
              .name
                -trans "Receive SMS"
              .delete.hide
                -trans "Remove Rules?"
              %a.close.hide
                .glyph.icon-close
              .clearfix
          %tr.rules

      .configure.hide
        .icon-tree-2

      .mask

    .action.send-response
      .move-up.icon-arrow-down.hide
      .name
        -trans "Send Message"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
          .empty
            -trans "Click here to send a message"
      .mask

    .action.say
      .move-up.icon-arrow-down.hide
      .name
        -trans "Play Message"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
          .empty
            -trans "Click here to enter the message to read"
        .play-button.icon-arrow-right-8.hide
        %audio.player{type:"audio/wav"}

      .icon-loop.spin
      .mask

    .action.add-to-group
      .move-up.icon-arrow-down.hide
      .name
        -trans "Add to Group"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
      .mask

    .action.remove-from-group
      .move-up.icon-arrow-down.hide
      .name
        -trans "Remove from Group"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
      .mask

    .action.send-message
      .move-up.icon-arrow-down.hide
      .name
        -trans "Send Message"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .to.hide
        .to-label
          -trans "To:"
        .recipients
          .icon-users-2
          -trans "Managers,"
          Nicolas Pottier
      .body
        .message
          -trans "Somebody is having problems with their water filter"
      .mask

    .action.send-email
      .move-up.icon-arrow-down.hide
      .name
        -trans "Send E-mail"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .to
        .to-label
          -trans "To:"
        .recipients
      .body
        .message
      .mask

    .action.save-to-contact
      .move-up.icon-arrow-down.hide
      .name
        -trans "Update Contact"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
          -trans "Update value for"
          %span.field
          %span.value.hide
      .mask

    .action.lang
      .move-up.icon-arrow-down.hide
      .name
        -trans "Set Language"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
          %span.language
      .mask

    .action.start-flow
      .move-up.icon-arrow-down.hide
      .name
        -trans "Start Another Flow"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
          %span.flow
      .mask

    .action.trigger-flow
      .move-up.icon-arrow-down.hide
      .name
        -trans "Start Another Flow"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .to.hide
        .to-label
          -trans "Who:"
          &nbsp;
        .recipients
          .icon-users-2
          -trans "Managers,"
          Nicolas Pottier
      .body
        .message
          %span.flow
      .mask

    .action.api
      .move-up.icon-arrow-down.hide
      .name
        -trans "Webhook"
      .delete.hide
        -trans "Remove Action?"
      %a.close.hide
        .glyph.icon-close
      .clearfix
      .body
        .message
      .mask
    %table
      %tr
        %td.rule{valign:"bottom"}
          .caption
            -trans "Label"
          .source

    %li.rule-row

      .glyph.icon-menu

      //.message
        -trans "If response"

      %select.operator{style:"width:'140px'"}
        %option.text{ value:"contains_any" }
          -trans "has any of these words"
        %option.text{ value:"contains" }
          -trans "has all of these words"
        %option.keypad{ value:"starts" }
          -trans "starts with"
        %option.keypad{ value:"number" }
          -trans "has a number"
        %option.keypad{ value:"lt" }
          -trans "has a number less than"
        %option.keypad{ value:"eq" }
          -trans "has a number equal to"
        %option.keypad{ value:"gt" }
          -trans "has a number more than"
        %option.keypad{ value:"between" }
          -trans "has a number between"
        %option.text{ value:"date" }
          -trans "has a date"
        %option.text{ value:"date_before" }
          -trans "has a date before"
        %option.text{ value:"date_equal" }
          -trans "has a date equal to"
        %option.text{ value:"date_after" }
          -trans "has a date after"
        %option.keypad{ value:"phone" }
          -trans "has a phone number"
        -if user_org.country
          %option.keypad{ value:"state" }
            -trans "has a state"
          %option.keypad{ value:"district" }
            -trans "has a district"
        %option.keypad{ value:"regex" }
          -trans "matches regular expression"

      #date-operator-1{style:"display:none;"}
        .message
          -trans "today +"

      %input.operand{ name:'operand', type: "text"}
      #date-operator-2{style:"display:none;"}
        .message
          -trans "days"
      #operand-hide{style:"display:none;"}

      #operand-two-container
        .message
          -trans "and"
        %input.operand-two{ name:'operand_two', type: "text"}
      .message
        -trans "categorize as"

      %input.category{ name:'category', type: "text", maxlength: "36"}

      %a.close.hide
        .glyph.icon-close
      .error-message.hide
        -trans "Don't be silly."

    #tab-content
      #variable-name
        .message
          -trans "Save response as a variable named"
        %input#label-name{type:'text'}

      #content-menu.tab.hide
        -for i in '1234567890'
          -if i == '4' or i == '7' or i == '0'
            .break
          .keypad{class:'num-{{i}}'}
            .num
              {{ i }}
            .category
              %input.key

      #content-keypad-series.tab.hide
        #split-help.help-text
          -trans "Run these rules against a "
          <a class='split-link' href='#'>
          -trans "different variable"
          </a>
          -trans "instead."
        #split-on
          .message
            -trans "If"
            .split-variable
              -trans "the keypad entry before the # symbol.."
          %ul.rule-list

      #content-recording.tab.hide
        This is the recording

      #content-multiple.tab.hide
        #split-help.help-text
          -trans "Run these rules against a "
          <a class='split-link' href='#'>
          -trans "different variable"
          </a>
          -trans "instead."
        #split-on
          .message
            -trans "If"
            .split-variable
              -trans "the message response.."
          %ul.rule-list

      #content-numeric.tab.hide
        .message.range
          -trans "The acceptable range is from"
        %input#numeric-min{type:'text', value:''}

        .message.to
          -trans "to"
        %input#numeric-max{type:'text', value:''}

        .error-message
        %p

      #category-options.hide
        .ignore-everything-else.hide
          %input#ignore-unknown{type:'checkbox', name:'ignore_unknown', value:'ignored', checked:'true'}
          %label{for:'ignore-unknown'}
            -trans "Ignore everything else"

    .forms
      .update-variable
        #modal-content
          %p.message
            -block trans
              Rules are normally evaluated against the incoming message. However, rules can instead be
              applied against any variable in your flow.
          %p
            -trans "Enter the variable you would like your rules to be applied to."
          %input.split-operand{type:'text', value:'@step.value'}
          .help-text
            -trans "For example, you might use @contact.tel or @extra.product_sku."

      .send-response
        .message
          %textarea#id_message{name:'message'}
          #counter 0

      .send-message
        .recipients
        .message
          %textarea#id_message{name:'message'}
          #counter 0

      .say
        .message
          %textarea#id_message{name:'message'}

      .add-to-group
        .action-form
          .instructions
            -trans "Choose a group to add the contact to"
          .group


      .remove-from-group
        .action-form
          .instructions
            -trans "Choose a group to remove the contact from"
          .group

      .save-to-contact
        .action-form
          .label
            -trans "Save to field"
          %br
          %input.field-name
          .help-text
            -trans "Select an existing field, or type a name to create a new field."

          .label
            -trans "Value"

          %input.field-value{type:'text'}

          .help-text
            -trans "The value to store can be any text you like. You can also reference other values that have been collected up to this point by typing @flow."

      .lang
        .action-form
          .instructions
            -trans "Set the preferred language for the contact. "
          %select.lang
            -for lang in languages
              %option{ value:'{{lang.iso_code}}' }
                {{ lang.name }}

      .start-flow
        .action-form
          .instructions
            -trans "This action redirects contacts to a new flow. When they are done with that flow, they can continue the current one."
          %select.new-flow
            -for flow in flows
              %option{ value:'{{flow.pk}}' }
                {{ flow.name }}

      .trigger-flow
        .action-form
          .instructions
            -blocktrans
              This action starts the contacts you specify down a flow. The flow variables collected up to this point will be
              available in @extra
          .label
            -trans "Contacts"
          .recipients

          .label
            -trans "Flow"
          %select.new-trigger-flow
            -for flow in flows
              %option{ value:'{{flow.pk}}' }
                {{ flow.name }}

      .send-email
        .label
          -trans "To"
        .email-address
        .label
          -trans "Subject"
        %input.email-subject{type:'text'}

        .label
          -trans "Message"
        %textarea.email-body{name:'body'}

      .api
        .message
          %p.description
            -blocktrans
              Using a Webhook you can fetch data from an external database and use it in this flow.
              Enter the URL to POST to at this point in the flow.

          %input.form-action{name:'form-action', style:'width:80px'}
          %input.url{placeholder:'http://yourwebsite.com/endpoint'}
          .invalid-url.error-text.hide
            -trans "Enter a valid URL before continuing"
          .help-text
            -trans "We'll include the message text along with data specified in the <a href='/api/v1/webhook/#flow'>Webhook Flow Event API</a>."
          .step-label
            -trans "This step will be identified as"
          .step-uuid

          %p.description.response
            -trans "If your server responds with JSON, each property will be added to the flow."

          .example
            :plain
              <pre>{
                product: "Solar charging kit",
                stock_level: 32
              }</pre>

            .help-text
              -trans "In this example @extra.product and @extra.stock_level would be added for all future steps."


    -include "delete_modal_include.html"


-block extra-script
  {{ block.super }}
  <script type="text/javascript" src="{{ STATIC_URL }}js/jquery.jsPlumb-1.5.1.js "></script>
  <script type="text/javascript" src="{{ STATIC_URL }}scripts/autosize/jquery.autosize-min.js "></script>

  -load compress
  -compress js
    <script type="text/coffeescript" charset="utf-8" src="{{ STATIC_URL }}scripts/at/jquery.caret.coffee" />
    <script type="text/coffeescript" charset="utf-8" src="{{ STATIC_URL }}scripts/at/jquery.atwho.coffee" />


  :javascript
    postURL = '{% url "flows.flow_json" object.pk %}';
    activityURL = '{% url "flows.flow_activity" object.pk %}';
    apiURL = '{% url "api" %}';
    flowId = {{object.pk}};
    window.flowName = "{{ object.name|escape }}";
    initial = {{initial|safe}};
    contactFields = {{contact_fields|safe}};
    hideActivity = false;
    simulateURL = '{% url "flows.flow_simulate" object.pk %}';

    {% if can_edit %}
    canEdit = true;
    {% else %}
    canEdit = false;
    {% endif %}

    $(function(){
      // where is our status box now?
      var statusTop = $("#status").offset().top;

      // when the window scrolls check to see whether it is about to go off screen. If so then switch to fixed.
      $(window).scroll(function() {
        var topOfWindow = $(window).scrollTop();
        if (statusTop < topOfWindow) {
          $("#status").addClass("fixed");
        } else {
          $("#status").removeClass("fixed");
        }
      });
    });

    function showWarning(title, message) {
      modal = new Modal(title, message);
      modal.addClass('alert');
      modal.setListeners({onPrimary: function(){
        $('.primary').click(modal.dismiss());
      }}, false);
      modal.show();
    }

    function broadcastToNode(nodeUUID) {
      var queryString = "s=" + nodeUUID;

      if (window.simulation) {
        queryString += "&simulation=true";
      }


      showComposeInitialized(queryString);
      return false;
    }

  :javascript
    $(document).ready(function() {
      window.message_completions = {{completions|safe}};
      window.extend_contact_fields = [];
      window.is_voice = {% if object.flow_type == "V" %}true{%else%}false{%endif%};

      {% if starting %}
        $("#pending").show();
      {% endif %}
    });

    {% if org_perms.flows.flow_update %}

    $(".update-rulesflow").live('click', function(){
      var modal = new Modax('Update Flow', '{% url "flows.flow_update" object.pk %}');
      modal.setIcon('icon-users-2');
      modal.setListeners({
        onSuccess: function(data) {location.reload(); },
        onFormLoaded: function() { 
          $('#id_label').children("option:first-child").before("<option></option>");
          $('#id_label').select2({minimumResultsForSearch: -1, placeholder: "No Label Selected"});}
      });
      modal.show();
    });
    {% endif %}
  
    {% if org_perms.msgs.broadcast_send %}
    $(".broadcast-rulesflow").live('click', function(){
      if(initial['archived']) {
        showWarning(gettext('Archive'), gettext('This flow is Archived.') + '<br/>' + gettext('You cannot add participants to an archived flow'))
      }else{
        var modal = new Modax(gettext('Start Flow'), '{% url "flows.flow_broadcast" object.pk %}');
        var onActions = {
          onSuccess: function(data) {
            $("#pending").show();
          },
          onFormLoaded: function() { }
        }
        // check if there is no channel, change the primary button behavior to redirect to channel creation
        if('{{has_outgoing_channel}}' == 'False') {
          modal.setPrimaryButton(gettext("Add Channel"));
          onActions['onPrimary'] = function() { document.location.href = '{% url "channels.channel_list" %}' };
        }
        modal.setListeners(onActions);
        modal.show();
      }
    });
    {% endif %}

    $(document).ready(function() {
      // show tooltip for both toggle buttons
      $('#toggle-simulator').tooltip();
      $('#toggle-activity').tooltip();
    });

  -compress js
    <script type="text/coffeescript" charset="utf-8" src="{{ STATIC_URL }}coffee/simulator.coffee" />
    <script type="text/coffeescript" charset="utf-8" src="{{ STATIC_URL }}coffee/flows.coffee" />
    <script src="{{ STATIC_URL }}js/jquery.ui.widget.js"></script>
    <script src="{{ STATIC_URL }}js/jquery.iframe-transport.js"></script>
    <script src="{{ STATIC_URL }}js/jquery.fileupload.js"></script>
