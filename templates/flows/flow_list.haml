-extends "smartmin/list.html"
-load smartmin sms temba compress
-load i18n humanize

-block title-icon
  .title-icon
    %span.glyph.icon-tree

-block page-top
  {% render as page_top %}
    {{block.super}}
  {% endrender %}
  -if org_has_flows
    {{page_top}}

-block top-form
  - if view.search_fields
    - block search-form
      %form
        %input.input-medium.search-query{type:'text', placeholder:'{% trans "Search" %}', name:"search", value:"{{search}}"}
        -if request.REQUEST.status
          %input{type:'hidden', name:'status', value:'{{request.REQUEST.status}}'}

-block content

  -if not org_has_flows
    -include "flows/empty_include.html"
  -else
    #pjax
      -block pjax
        .row-fluid
          .span3.sidebox
            %div{style:"margin-bottom: 10px"}
              - if org_perms.flows.flow_create
                %a.btn.btn-primary.btn-block.create_flow.new-flow{href:"#"}
                  -trans "Create Flow"

            #sidebar-nav
              %ul.nav.nav-list.level1
                %li.nav-header
                  -trans "Flows"
                - for folder in folders
                  %li{'class':"{% if folder.url == request_url %}active{% endif %}" }
                    %a{'href':'={folder.url}'}
                      {{ folder.label }} ({{ folder.count }})

                -if labels
                  %li.nav-header
                    -trans "Labels"
                  - for label in labels
                    - with label.children as children
                      %li{'class': '{% if current_label.id == label.pk %}active{% endif %} {% if children %}lbl-parent{%else%}lbl-not-parent{% endif %} {% if current_label in children or current_label.id == label.pk %}expanded{%endif %}'}
                        %a{'href':'{% url "flows.flow_filter" label.pk %}'}
                          {{ label.label }} ({{ label.count }})
                          - if children
                            - if current_label in children or current_label.id == label.pk
                              .glyph.icon-arrow-down-2
                            -else
                              .glyph.icon-arrow-right-8

                        - if children
                          - if current_label in children or current_label.id == label.pk
                            %ul.nav.nav-list.level2
                              - for sub_label in children
                                %li{'class':'{% if current_label.pk == sub_label.pk %}active{% endif %}'}
                                  %a{'href':'{% url "flows.flow_filter" sub_label.pk %}'}
                                    {{ sub_label.name }} ({{ sub_label.get_flows_count }})

          -block flow-list
            .span9
              - block buttons
                .pull-right
                  -block buttons-right

                .list-buttons-container
                  .list-buttons.hide
                    - if 'unlabel' in actions and org_perms.flows.flow_update
                      %span.btn-group
                        %a.object-btn-unlabel{href:'#'}
                          %button.btn{data-toggle:'tooltip', data-trigger:'hover', data-delay:"800", data-placement:'top', data-original-title:'{% trans "Unlabel" %}'}
                            .glyph.icon-box

                    - if 'restore' in actions and org_perms.flows.flow_update
                      %span.btn-group
                        %a.object-btn-restore{href:'#'}
                          %button.btn{data-toggle:'tooltip', data-trigger:'hover', data-delay:"800", data-placement:'top', data-original-title:'{% trans "Activate" %}'}
                            .glyph.icon-tree

                    - if 'archive' in actions and org_perms.flows.flow_update
                      %span.btn-group
                        %a.object-btn-archive{href:'#'}
                          %button.btn{data-toggle:'tooltip', data-trigger:'hover', data-delay:"800", data-placement:'top', data-original-title:'{% trans "Archive" %}'}
                            .glyph.icon-box

                    - if 'label' in actions and org_perms.flows.flow_update
                      %span.btn-group
                        %button.btn.dropdown-toggle{data-toggle:"dropdown", data-trigger:'hover', data-delay:"800", data-placement:'top', data-original-title:'{% trans "Labels" %}'}
                          .glyph.icon-tag
                          %span.caret
                        %ul.dropdown-menu.label-menu{'role':'menu', 'aria-labelledby':'dlabel'}
                          - for label in labels
                            -with label.children as children
                              %li{'class':'{% if children %}dropdown-submenu{% endif %}'}
                                %a.lbl-menu.object-btn-label{href:'#', 'tabindex':'-1', data-id:'{{label.pk}}'}
                                  .glyph.message-label
                                  = label.label
                                %ul.dropdown-menu.label-menu
                                  - for child in children
                                    %li
                                      %a.lbl-menu.object-btn-label{'href':'#', 'tabindex':'-1', data-id:'{{child.pk}}'}
                                        .glyph.message-label
                                        = child.name
                          -if org_perms.flows.flowlabel_create
                            %li
                              %a.lbl-menu.add-label
                                -trans "Add Label"

                    %span.btn-group
                      %a.object-btn-export{'href':'#', onclick:'exportFlows()'}
                        %button.btn{data-toggle:'tooltip', data-trigger:'hover', data-delay:"800", data-placement:'top', data-original-title:'{% trans "Download Results" %}'}
                         .glyph.icon-excel

              %table.list-table.flow-list.object-list.table.table-condensed{style: '{% if not org_perms.flows.flow_update %}margin-top:10px{% endif %}'}
                %tbody
                  -for object in object_list
                    -with object.get_and_clear_unread_responses as new_responses
                      %tr.flow.object-row.select-row{ data-object-id: "{{ object.id }}" }
                        %td.flow.checkbox.object-row-checkbox
                          -if object.flow_type != 'V' or object.org.supports_ivr
                            .glyph.icon-checkbox-unchecked.flow-checkbox.object-row-checkbox

                        %td.value-name
                          -if object.flow_type == 'V'
                            .icon-phone
                          -elif object.flow_type == 'S'
                            .icon-channel-android

                          {{ object.name }}

                          -if not object.is_archived
                            .value-labels
                              %nobr
                                -if new_responses
                                  %span.label.label-info.label-responses
                                    - blocktrans count counter=new_responses
                                      1 New Response
                                      - plural
                                      ={counter} New Responses

                                - for label in object.labels.all
                                  %span.label.label-info.lbl{ data-id: '{{label.id}}' }
                                    %a{href:"{% url 'flows.flow_filter' label.pk%}"}
                                      ={label.name}

                        -if not object.get_total_contacts
                          %td.value-status
                          %td.value-status
                            -trans "No participants"

                        -else
                          %td.value-status
                            {% blocktrans count participant_count=object.get_total_contacts|intcomma %}
                              {{ participant_count }} participant
                            {% plural %}
                              {{ participant_count }} participants
                            {% endblocktrans %}

                          %td.value-status
                            {% blocktrans with completed_percentage=object.get_completed_percentage %}
                              {{ completed_percentage }}% completion
                            {% endblocktrans %}

                  -empty
                    %tr.flow
                      %td.flow
                        -trans "No matching flows."

              - block paginator
                - if object_list.count
                  .paginator
                    - include "smartmin/sidebar_pagination.haml"


-block extra-script
  {{ block.super }}

  :javascript

    {% if org_perms.flows.flow_update %}
    function exportFlows(){
      var flowIds = getCheckedIds();
      document.location = '/flow/export_results/' + "?ids=" + flowIds.join();
    }

    {% endif %}

    {% if org_perms.flows.flow_update %}

    function postLabelChanges(flowsIds, labelId, addLabel, number, onError) {

         fetchPJAXContent("", "#pjax", { postData: { objects: flowsIds, label: labelId, add: addLabel, action: 'label', pjax: 'true', number:number },


         forceReload: true, onSuccess: function(data, textStatus) {

           // if there is a live modal, hide it
           var modal = $("#active-modal");
           if ((modal).is(":visible")) {
             modal.data('object').dismiss();
           }

           $("#pjax").html(data);
           recheckIds();
         }, onError: onError});
    }

    {% endif %}

    $(document).ready( function() {

      $(document).on('click', 'tr.flow td:nth-child(n+2)', function(e){
         document.location = '/flow/editor/' + $(this).parent().data("object-id");
      });

      {% if org_perms.flows.flow_create %}
      $(".create_flow").live('click', function() {
        var modal = new Modax('{% trans "Create Flow" %}', '{% url "flows.flow_create" %}');
        modal.setIcon('icon-tree');
        modal.setRedirectOnSuccess(true);
        modal.show();
      });
      {% endif %}

      {% if org_perms.flows.flowlabel_create %}
      $('.page-content').on('click', ".add-label", function() {
        lastChecked = getCheckedIds();
        var modal = new Modax('{% trans "Create Label" %}', '{% url "flows.flowlabel_create" %}')
        modal.setListeners({
          onFormLoaded: function(){
            $("#active-modal form input#id_flows").val(lastChecked.join());
          },
          onCompleted: function() { refresh(function() { recheckIds(); }, true);}
        });

        modal.show();
      });
      {% endif %}

    });
