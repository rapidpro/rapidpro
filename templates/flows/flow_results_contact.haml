-extends "smartmin/read.html"
-load smartmin sms compress temba contacts i18n

-block post-header
  -include "flows/simulator.html"

-block page-top

  .row
    .span8
      .medium-help.icon-user.float-left
      %h2.font_normalize.header-margin
        {{ contact|name_or_urn:user_org|truncatechars:40 }}
        .flow-name
          {{ flow.name }}


    .span4
      .pull-right
        %a.btn.btn-success{ href: "{% url 'flows.flow_export_results' %}?ids={{ object.id }}" }
          -trans "Export Flow Results"
        %span.btn-group.gear-menu
          %button.btn.dropdown-toggle{ data-toggle:"dropdown" }
            .glyph.icon-cog
            %span.caret
          %ul.dropdown-menu.label-menu{'role':'menu', 'aria-labelledby':'dlabel'}
            %li
              %a{ href: "{% url 'flows.flow_editor' object.pk %}" }
                - trans "View Flow"
            %li
              %a{ href: "{% url 'contacts.contact_read' contact.uuid %}" }
                - trans "View Contact"

-block buttons

-block extra-less
  <link rel="stylesheet" type="text/css" href="{{STATIC_URL}}css/datatables/jquery.dataTables.css">
  -load compress
  -compress css
    %link{type:'text/less', rel:'stylesheet', href:'{{STATIC_URL}}less/simulator.less', media:'all'}

  -compress css inline
    {% lessblock %}
      :plain
        .gear-menu {
          .dropdown-menu {
            left: -96px;
          }
        }
        .gear-menu {
          .label-menu {
            li {
              a {
                padding: 8px 8px;
              }
            }
          }
        }

        .to {
          a {
            color: @flat-white;
          }
        }
        .recording {



          padding:1px 6px;
          padding-left:1px;
          display:inline-block;
          margin-right:5px;
          line-height:0px;
          font-size:11px;

          .text {
            display:inline-block;
            padding-left:0px;
          }

          &:hover {
            cursor:pointer;
          }

          &.playing {

            .stop {
              display:block;
            }

            .play {
              display:none;
            }
          }
        }


        .flow-name {
          font-size:18px;
          margin-top:-3px;
        }

        .run-title {
          margin-top:20px;
          border-bottom: 1px solid #ccc;
          .date {
            display: inline-block;
          }
        }

        .message {
          font-style: italic;
        }

        .run {
          width:300px;
        }


        #simulator {
          display:inline-block;
          position:absolute;
          top:250px;
          right:40px;

          padding:0;
          margin:0;

          .simulator-body {
            height: 372px;
            margin-top:0px;
            margin-bottom:15px;
          }

          .simulator-footer, .simulator-close, .simulator-refresh  {
            display:none;
          }

          &.pinned-sim {
            position:fixed;
            top:70px;
            right:40px;
          }
        }

        .run-summaries {
          margin-top:25px;

          .run-summary {

            .remove {
              position:relative;
              margin-left:-25px;
              margin-top:-5px;
              float:left;
            }

            border: 1px solid #fff;
            cursor: pointer;
            margin-top:5px;
            padding:20px;
            padding-left:40px;
            padding-right:40px;
            color: #888;

            &.selected {
              border: 1px solid @flat-mutedblue - #111;
              color: @flat-mutedblue - #111;
              .remove {
                display:inline-block;
              }
            }

            &:hover {
              color: @flat-mutedblue - #111;

            }

            .started {
              display:inline-block;
            }

            .ended {
              display:inline-block;
            }

            .messages {
              display:inline-block;
              float:right;
              margin-top:-6px;
            }

            .active {
              display:inline-block;
            }

            .most-recent {
              font-style: italic;
              font-size:12px;
              line-height:15px;
              margin-top:5px;

              .title {
                font-style: normal;
                margin-right:5px;
              }
            }
          }
        }

        .run-messages {
          padding-bottom:400px;

          .empty {
            font-style: italic;
          }
        }

        .attn {
          font-weight:bold;
        }



    {% endlessblock %}

-block extra-script
  {{block.super}}

  :javascript
    function playMessage (messageId) {
      var audio = $('audio#message-' + messageId)
      var parent = audio.parent();
      var player = audio[0];

      if (!parent.hasClass('playing')) {
        audio.bind('ended', function(){
          parent.removeClass('playing');

        });

        parent.addClass('playing');
        player.currentTime = 0;
        player.play();

      } else {
        parent.removeClass('playing');
        player.pause();
      }
    }


    $(window).scroll(function() {
      var top = $(this).scrollTop();
      var sim = $("#simulator");
      if (top > 180 && !sim.hasClass('pinned-sim')) {
        sim.addClass('pinned-sim');
      } else {
        if (top <= 180 && sim.hasClass('pinned-sim')) {
          sim.removeClass('pinned-sim');
        }
      }
    });

    $(document).ready(function() {
      $('.run-summary').click(function() {
        $('.run-summary').removeClass('selected');
        $(this).addClass('selected');
        var run = $(this).data('run');
        run = $('.run_' + run).clone();
        if (run.length > 0){
          $('.simulator-content').show();
          $('.simulator-body').append(run.html());
          var children = $('.simulator-body').children('.run-messages');
          if (children.length > 1) {
            $(children[0]).slideUp('fast', function(){
              $(this).remove()
            });
          }
          $('.simulator-body').scrollTop(0);
        } else {
          $('.simulator-content').hide();
        }
      });

      $('.run-summary:first').click();

    });

    {% if org_perms.flows.flow_update %}
      $(".remove").on("click", function(e){
        e.stopPropagation();

        var clicked = $(this);
        var runId = $(this).data('run');

        var modal = new ConfirmationModal($('.deletion > .title').html(), $('.deletion > .body').html());
        modal.addClass('alert');
        modal.setListeners({ onPrimary: function(){
          $.post('{% url 'flows.flow_results' object.id %}', {run: runId}, function() {
            clicked.parents('.run-summary').remove();
            modal.dismiss()
            // fetchData($("#id-broadcast"));
          });
        }}, false);

        modal.setPrimaryButton('Remove');
        modal.show();
      });
    {% endif %}



-block fields


  .row
    .span8
      .run-summaries
        -for run in runs

          -with run.messages|last as last_message
            .run-summary{data-run:'{{run.pk}}'}
              -if org_perms.flows.flow_update
                .icon-cancel-circle.remove.hide{data-run:'{{run.pk}}'}
              .started
                Started
                %span.attn
                  {{run.created_on}}
                -if last_message.created_on and last_message.created_on|date:"jS F Y H:i" != run.created_on|date:"jS F Y H:i"
                  to
                  %span.attn
                    {{ last_message.created_on }}
              .messages
                -if run.messages|length > 0
                  {{ run.messages|length }}
                  .glyph.icon-bubbles-2

              .active
                -if run.is_active
              .most-recent
                .title
                  -if last_message
                    - blocktrans with created_on=last_message.created_on
                      Last message sent {{created_on}}
                -if last_message.text|length > 1 and last_message.text != last_message.recording_url
                  {{last_message}}


  -for run in runs
    -if run.messages
      -with run.messages as messages

        -if messages|length > 0
          .run.hide{class:'run_{{run.pk}}'}
            .run-messages
              .ilog.from
                -blocktrans with created_on=run.created_on
                  Started {{created_on}}
                %br
                {{messages|length}} message{{messages|pluralize:"s"}}

              -for msg in messages
                -if msg.direction == 'O'
                  .imsg.from
                    -if msg.text != msg.recording_url
                      {{msg.text}}
                    -if msg.recording_url
                      .recording{class:'direction-{{msg.direction}}', onClick:'playMessage("{{msg.pk}}");'}
                        %audio{id:'message-{{msg.pk}}', type:"audio/wav", src:'{{msg.recording_url}}'}
                        .play
                          %a{href:'javascript:void();'}
                            -trans "listen"
                        .stop.hide
                          %a{href:'javascript:void();'}
                            -trans "stop"
                -if msg.direction == 'I'
                  -if msg.text == ''
                    .imsg.to.empty
                      -trans "Empty message"
                  -else
                    .imsg.to
                      -if msg.text != msg.recording_url
                        {{msg.text}}
                      -if msg.recording_url
                        .recording{class:'direction-{{msg.direction}}', onClick:'playMessage("{{msg.pk}}");'}
                          %audio{id:'message-{{msg.pk}}', type:"audio/wav", src:'{{msg.recording_url}}'}
                          .play
                            %a{href:'javascript:void();'}
                              -trans "listen"
                          .stop.hide
                            %a{href:'javascript:void();'}
                              -trans "stop"


                -with msg.get_flow_step as step
                  -if step and step.rule_category
                    .ilog.from
                      - blocktrans with category=step.rule_category
                        Categorized as {{category}}


              -if run.exited_on
                .ilog.from
                  -if run.exit_type == 'E'
                    - blocktrans with exited_on=run.exited_on
                      This run expired {{ exited_on }}
                  -else
                    - blocktrans with name=contact|name_or_urn:user_org
                      {{name}} exited from this flow


-block post-fields
  - if org_perms.flows.flow_update
    .deletion.hide
      .title
        - trans "Remove Contact Results"

      .body
        %p
          - blocktrans
            Are you sure you want to remove the results for this contact?

      %a#delete-form.posterize{}
