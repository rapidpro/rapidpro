# Generated by Django 2.1.8 on 2019-07-01 20:56

import django_countries.fields

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import temba.channels.models
import temba.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contacts", "0101_initial"),
        ("orgs", "0055_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alert",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[("P", "Power"), ("D", "Disconnected"), ("S", "SMS")],
                        help_text="The type of alert the channel is sending",
                        max_length=1,
                        verbose_name="Alert Type",
                    ),
                ),
                ("ended_on", models.DateTimeField(blank=True, null=True, verbose_name="Ended On")),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this object",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                ("channel_type", models.CharField(max_length=3, verbose_name="Channel Type")),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Descriptive label for this channel",
                        max_length=64,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        help_text="Address with which this channel communicates",
                        max_length=255,
                        null=True,
                        verbose_name="Address",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Country which this channel is for",
                        max_length=2,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "claim_code",
                    models.CharField(
                        blank=True,
                        help_text="The token the user will us to claim this channel",
                        max_length=16,
                        null=True,
                        unique=True,
                        verbose_name="Claim Code",
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        blank=True,
                        help_text="The secret token this channel should use when signing requests",
                        max_length=64,
                        null=True,
                        unique=True,
                        verbose_name="Secret",
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The last time this channel contacted the server",
                        verbose_name="Last Seen",
                    ),
                ),
                (
                    "device",
                    models.CharField(
                        blank=True,
                        help_text="The type of Android device this channel is running on",
                        max_length=255,
                        null=True,
                        verbose_name="Device",
                    ),
                ),
                (
                    "os",
                    models.CharField(
                        blank=True,
                        help_text="What Android OS version this channel is running on",
                        max_length=255,
                        null=True,
                        verbose_name="OS",
                    ),
                ),
                (
                    "alert_email",
                    models.EmailField(
                        blank=True,
                        help_text="We will send email alerts to this address if experiencing issues sending",
                        max_length=254,
                        null=True,
                        verbose_name="Alert Email",
                    ),
                ),
                (
                    "config",
                    temba.utils.models.JSONAsTextField(
                        default=dict,
                        help_text="Any channel specific configuration, used for the various aggregators",
                        null=True,
                        verbose_name="Config",
                    ),
                ),
                (
                    "schemes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=16),
                        default=temba.channels.models._get_default_channel_scheme,
                        help_text="The URN schemes this channel supports",
                        size=None,
                        verbose_name="URN Schemes",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        default="SR",
                        help_text="The roles this channel can fulfill",
                        max_length=4,
                        verbose_name="Channel Role",
                    ),
                ),
                (
                    "bod",
                    models.TextField(
                        help_text="Any channel specific state data", null=True, verbose_name="Optional Data"
                    ),
                ),
                (
                    "tps",
                    models.IntegerField(
                        help_text="The max number of messages that will be sent per second",
                        null=True,
                        verbose_name="Maximum Transactions per Second",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channels_channel_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channels_channel_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization using this channel",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channels",
                        to="orgs.Org",
                        verbose_name="Org",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="The channel this channel is working on behalf of",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="channels.Channel",
                    ),
                ),
            ],
            options={"ordering": ("-last_seen", "-pk")},
        ),
        migrations.CreateModel(
            name="ChannelConnection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        help_text="The external id for this session, our twilio id usually", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "Pending"),
                            ("Q", "Queued"),
                            ("W", "Wired"),
                            ("R", "Ringing"),
                            ("I", "In Progress"),
                            ("D", "Complete"),
                            ("B", "Busy"),
                            ("F", "Failed"),
                            ("N", "No Answer"),
                            ("C", "Canceled"),
                            ("X", "Interrupted"),
                            ("T", "Triggered"),
                            ("A", "Initiated"),
                            ("E", "Ending"),
                        ],
                        default="P",
                        max_length=1,
                    ),
                ),
                ("direction", models.CharField(choices=[("I", "Incoming"), ("O", "Outgoing")], max_length=1)),
                ("started_on", models.DateTimeField(blank=True, null=True)),
                ("ended_on", models.DateTimeField(blank=True, null=True)),
                ("connection_type", models.CharField(choices=[("V", "Voice")], max_length=1)),
                (
                    "duration",
                    models.IntegerField(default=0, help_text="The length of this connection in seconds", null=True),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of times this call has been retried",
                        verbose_name="Retry Count",
                    ),
                ),
                (
                    "error_count",
                    models.IntegerField(
                        default=0, help_text="The number of times this call has errored", verbose_name="Error Count"
                    ),
                ),
                (
                    "next_attempt",
                    models.DateTimeField(
                        help_text="When we should next attempt to make this call",
                        null=True,
                        verbose_name="Next Attempt",
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="connections", to="channels.Channel"
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="connections", to="contacts.Contact"
                    ),
                ),
                (
                    "contact_urn",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="connections",
                        to="contacts.ContactURN",
                    ),
                ),
                ("org", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="orgs.Org")),
            ],
        ),
        migrations.CreateModel(
            name="ChannelCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                (
                    "count_type",
                    models.CharField(
                        choices=[
                            ("IM", "Incoming Message"),
                            ("OM", "Outgoing Message"),
                            ("IV", "Incoming Voice"),
                            ("OV", "Outgoing Voice"),
                            ("LS", "Success Log Record"),
                            ("LE", "Error Log Record"),
                        ],
                        help_text="What type of message this row is counting",
                        max_length=2,
                    ),
                ),
                ("day", models.DateField(help_text="The day this count is for", null=True)),
                ("count", models.IntegerField(default=0, help_text="The count of messages on this day and type")),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel this is a daily summary count for",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="counts",
                        to="channels.Channel",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChannelEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown Call Type"),
                            ("mt_call", "Outgoing Call"),
                            ("mt_miss", "Missed Outgoing Call"),
                            ("mo_call", "Incoming Call"),
                            ("mo_miss", "Missed Incoming Call"),
                            ("stop_contact", "Stop Contact"),
                            ("new_conversation", "New Conversation"),
                            ("referral", "Referral"),
                            ("welcome_message", "Welcome Message"),
                        ],
                        help_text="The type of event",
                        max_length=16,
                        verbose_name="Event Type",
                    ),
                ),
                (
                    "extra",
                    temba.utils.models.JSONAsTextField(
                        default=dict,
                        help_text="Any extra properties on this event as JSON",
                        null=True,
                        verbose_name="Extra",
                    ),
                ),
                (
                    "occurred_on",
                    models.DateTimeField(help_text="When this event took place", verbose_name="Occurred On"),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this event was created",
                        verbose_name="Created On",
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel on which this event took place",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="channels.Channel",
                        verbose_name="Channel",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        help_text="The contact associated with this event",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channel_events",
                        to="contacts.Contact",
                        verbose_name="Contact",
                    ),
                ),
                (
                    "contact_urn",
                    models.ForeignKey(
                        help_text="The contact URN associated with this event",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channel_events",
                        to="contacts.ContactURN",
                        verbose_name="URN",
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The org this event is connected to",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="orgs.Org",
                        verbose_name="Org",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChannelLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "description",
                    models.CharField(help_text="A description of the status of this message send", max_length=255),
                ),
                (
                    "is_error",
                    models.BooleanField(
                        default=None, help_text="Whether an error was encountered when sending the message"
                    ),
                ),
                ("url", models.TextField(help_text="The URL used when sending the message", null=True)),
                (
                    "method",
                    models.CharField(
                        help_text="The HTTP method used when sending the message", max_length=16, null=True
                    ),
                ),
                (
                    "request",
                    models.TextField(help_text="The body of the request used when sending the message", null=True),
                ),
                (
                    "response",
                    models.TextField(
                        help_text="The body of the response received when sending the message", null=True
                    ),
                ),
                (
                    "response_status",
                    models.IntegerField(help_text="The response code received when sending the message", null=True),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, help_text="When this log message was logged")),
                ("request_time", models.IntegerField(help_text="Time it took to process this request", null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel the message was sent on",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="logs",
                        to="channels.Channel",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        help_text="The channel session for this log",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channel_logs",
                        to="channels.ChannelConnection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SyncEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "power_source",
                    models.CharField(
                        help_text="The power source the device is using", max_length=64, verbose_name="Power Source"
                    ),
                ),
                (
                    "power_status",
                    models.CharField(
                        default="STATUS_UNKNOWN",
                        help_text="The power status. eg: Charging, Full or Discharging",
                        max_length=64,
                        verbose_name="Power Status",
                    ),
                ),
                (
                    "power_level",
                    models.IntegerField(help_text="The power level of the battery", verbose_name="Power Level"),
                ),
                (
                    "network_type",
                    models.CharField(
                        help_text="The data network type to which the channel is connected",
                        max_length=128,
                        verbose_name="Network Type",
                    ),
                ),
                ("lifetime", models.IntegerField(blank=True, default=0, null=True, verbose_name="Lifetime")),
                (
                    "pending_message_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of messages on the channel in PENDING state",
                        verbose_name="Pending Messages Count",
                    ),
                ),
                (
                    "retry_message_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of messages on the channel in RETRY state",
                        verbose_name="Retry Message Count",
                    ),
                ),
                (
                    "incoming_command_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of commands that the channel gave us",
                        verbose_name="Incoming Command Count",
                    ),
                ),
                (
                    "outgoing_command_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of commands that we gave the channel",
                        verbose_name="Outgoing Command Count",
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel that synced to the server",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="channels.Channel",
                        verbose_name="Channel",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channels_syncevent_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="channels_syncevent_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="alert",
            name="channel",
            field=models.ForeignKey(
                help_text="The channel that this alert is for",
                on_delete=django.db.models.deletion.PROTECT,
                to="channels.Channel",
                verbose_name="Channel",
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="created_by",
            field=models.ForeignKey(
                help_text="The user which originally created this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="channels_alert_creations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="channels_alert_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="sync_event",
            field=models.ForeignKey(
                help_text="The sync event that caused this alert to be sent (if any)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="channels.SyncEvent",
                verbose_name="Sync Event",
            ),
        ),
        migrations.AlterIndexTogether(name="channelcount", index_together={("channel", "count_type", "day")}),
    ]
