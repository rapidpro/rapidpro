# Generated by Django 1.10.5 on 2017-01-06 22:38

import django_countries.fields

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import temba.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]

    operations = [
        migrations.CreateModel(
            name="Alert",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "alert_type",
                    models.CharField(
                        choices=[("P", "Power"), ("D", "Disconnected"), ("S", "SMS")],
                        help_text="The type of alert the channel is sending",
                        max_length=1,
                        verbose_name="Alert Type",
                    ),
                ),
                ("ended_on", models.DateTimeField(blank=True, null=True, verbose_name="Ended On")),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this object",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                (
                    "channel_type",
                    models.CharField(
                        choices=[
                            ("AT", "Africa's Talking"),
                            ("A", "Android"),
                            ("BM", "Blackmyna"),
                            ("CT", "Clickatell"),
                            ("DA", "Dart Media"),
                            ("DM", "Dummy"),
                            ("EX", "External"),
                            ("FB", "Facebook"),
                            ("GL", "Globe Labs"),
                            ("HX", "High Connection"),
                            ("H9", "Hub9"),
                            ("IB", "Infobip"),
                            ("JS", "Jasmin"),
                            ("KN", "Kannel"),
                            ("LN", "Line"),
                            ("M3", "M3 Tech"),
                            ("MB", "Mblox"),
                            ("NX", "Nexmo"),
                            ("PL", "Plivo"),
                            ("SQ", "Shaqodoon"),
                            ("SC", "SMSCentral"),
                            ("ST", "Start Mobile"),
                            ("TG", "Telegram"),
                            ("T", "Twilio"),
                            ("TW", "TwiML Rest API"),
                            ("TMS", "Twilio Messaging Service"),
                            ("TT", "Twitter"),
                            ("VB", "Verboice"),
                            ("VI", "Viber"),
                            ("VP", "Viber Public Channels"),
                            ("VM", "Vumi"),
                            ("VMU", "Vumi USSD"),
                            ("YO", "Yo!"),
                            ("ZV", "Zenvia"),
                        ],
                        default="A",
                        help_text="Type of this channel, whether Android, Twilio or SMSC",
                        max_length=3,
                        verbose_name="Channel Type",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Descriptive label for this channel",
                        max_length=64,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        help_text="Address with which this channel communicates",
                        max_length=64,
                        null=True,
                        verbose_name="Address",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Country which this channel is for",
                        max_length=2,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "gcm_id",
                    models.CharField(
                        blank=True,
                        help_text="The registration id for using Google Cloud Messaging",
                        max_length=255,
                        null=True,
                        verbose_name="GCM ID",
                    ),
                ),
                (
                    "claim_code",
                    models.CharField(
                        blank=True,
                        help_text="The token the user will us to claim this channel",
                        max_length=16,
                        null=True,
                        unique=True,
                        verbose_name="Claim Code",
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        blank=True,
                        help_text="The secret token this channel should use when signing requests",
                        max_length=64,
                        null=True,
                        unique=True,
                        verbose_name="Secret",
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The last time this channel contacted the server",
                        verbose_name="Last Seen",
                    ),
                ),
                (
                    "device",
                    models.CharField(
                        blank=True,
                        help_text="The type of Android device this channel is running on",
                        max_length=255,
                        null=True,
                        verbose_name="Device",
                    ),
                ),
                (
                    "os",
                    models.CharField(
                        blank=True,
                        help_text="What Android OS version this channel is running on",
                        max_length=255,
                        null=True,
                        verbose_name="OS",
                    ),
                ),
                (
                    "alert_email",
                    models.EmailField(
                        blank=True,
                        help_text="We will send email alerts to this address if experiencing issues sending",
                        max_length=254,
                        null=True,
                        verbose_name="Alert Email",
                    ),
                ),
                (
                    "config",
                    models.TextField(
                        help_text="Any channel specific configuration, used for the various aggregators",
                        null=True,
                        verbose_name="Config",
                    ),
                ),
                (
                    "scheme",
                    models.CharField(
                        default="tel",
                        help_text="The URN scheme this channel can handle",
                        max_length=8,
                        verbose_name="URN Scheme",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        default="SR",
                        help_text="The roles this channel can fulfill",
                        max_length=4,
                        verbose_name="Channel Role",
                    ),
                ),
                (
                    "bod",
                    models.TextField(
                        help_text="Any channel specific state data", null=True, verbose_name="Optional Data"
                    ),
                ),
            ],
            options={"ordering": ("-last_seen", "-pk")},
        ),
        migrations.CreateModel(
            name="ChannelCount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "count_type",
                    models.CharField(
                        choices=[
                            ("IM", "Incoming Message"),
                            ("OM", "Outgoing Message"),
                            ("IV", "Incoming Voice"),
                            ("OV", "Outgoing Voice"),
                            ("LS", "Success Log Record"),
                            ("LE", "Error Log Record"),
                        ],
                        help_text="What type of message this row is counting",
                        max_length=2,
                    ),
                ),
                ("day", models.DateField(help_text="The day this count is for", null=True)),
                ("count", models.IntegerField(default=0, help_text="The count of messages on this day and type")),
            ],
        ),
        migrations.CreateModel(
            name="ChannelEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown Call Type"),
                            ("mt_call", "Outgoing Call"),
                            ("mt_miss", "Missed Outgoing Call"),
                            ("mo_call", "Incoming Call"),
                            ("mo_miss", "Missed Incoming Call"),
                        ],
                        help_text="The type of event",
                        max_length=16,
                        verbose_name="Event Type",
                    ),
                ),
                ("time", models.DateTimeField(help_text="When this event took place", verbose_name="Time")),
                (
                    "duration",
                    models.IntegerField(
                        default=0, help_text="Duration in seconds if event is a call", verbose_name="Duration"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this event was created",
                        verbose_name="Created On",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChannelLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "description",
                    models.CharField(help_text="A description of the status of this message send", max_length=255),
                ),
                (
                    "is_error",
                    models.BooleanField(
                        default=None, help_text="Whether an error was encountered when sending the message"
                    ),
                ),
                ("url", models.TextField(help_text="The URL used when sending the message", null=True)),
                (
                    "method",
                    models.CharField(
                        help_text="The HTTP method used when sending the message", max_length=16, null=True
                    ),
                ),
                (
                    "request",
                    models.TextField(help_text="The body of the request used when sending the message", null=True),
                ),
                (
                    "response",
                    models.TextField(
                        help_text="The body of the response received when sending the message", null=True
                    ),
                ),
                (
                    "response_status",
                    models.IntegerField(help_text="The response code received when sending the message", null=True),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, help_text="When this log message was logged")),
                ("request_time", models.IntegerField(help_text="Time it took to process this request", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ChannelSession",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "external_id",
                    models.CharField(
                        help_text="The external id for this session, our twilio id usually", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Q", "Queued"),
                            ("R", "Ringing"),
                            ("I", "In Progress"),
                            ("D", "Complete"),
                            ("B", "Busy"),
                            ("F", "Failed"),
                            ("N", "No Answer"),
                            ("C", "Canceled"),
                            ("X", "Interrupted"),
                            ("T", "Triggered"),
                            ("A", "Initiated"),
                        ],
                        default="P",
                        help_text="The status of this session",
                        max_length=1,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("I", "Incoming"), ("O", "Outgoing")],
                        help_text="The direction of this session, either incoming or outgoing",
                        max_length=1,
                    ),
                ),
                (
                    "started_on",
                    models.DateTimeField(
                        blank=True, help_text="When this session was connected and started", null=True
                    ),
                ),
                ("ended_on", models.DateTimeField(blank=True, help_text="When this session ended", null=True)),
                (
                    "session_type",
                    models.CharField(
                        choices=[("F", "IVR"), ("U", "USSD")], help_text="What sort of session this is", max_length=1
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(default=0, help_text="The length of this session in seconds", null=True),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel that created this session",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="channels.Channel",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="SyncEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "power_source",
                    models.CharField(
                        help_text="The power source the device is using", max_length=64, verbose_name="Power Source"
                    ),
                ),
                (
                    "power_status",
                    models.CharField(
                        default="STATUS_UNKNOWN",
                        help_text="The power status. eg: Charging, Full or Discharging",
                        max_length=64,
                        verbose_name="Power Status",
                    ),
                ),
                (
                    "power_level",
                    models.IntegerField(help_text="The power level of the battery", verbose_name="Power Level"),
                ),
                (
                    "network_type",
                    models.CharField(
                        help_text="The data network type to which the channel is connected",
                        max_length=128,
                        verbose_name="Network Type",
                    ),
                ),
                ("lifetime", models.IntegerField(blank=True, default=0, null=True, verbose_name="Lifetime")),
                (
                    "pending_message_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of messages on the channel in PENDING state",
                        verbose_name="Pending Messages Count",
                    ),
                ),
                (
                    "retry_message_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of messages on the channel in RETRY state",
                        verbose_name="Retry Message Count",
                    ),
                ),
                (
                    "incoming_command_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of commands that the channel gave us",
                        verbose_name="Incoming Command Count",
                    ),
                ),
                (
                    "outgoing_command_count",
                    models.IntegerField(
                        default=0,
                        help_text="The number of commands that we gave the channel",
                        verbose_name="Outgoing Command Count",
                    ),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        help_text="The channel that synced to the server",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="channels.Channel",
                        verbose_name="Channel",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channels_syncevent_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channels_syncevent_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
    ]
