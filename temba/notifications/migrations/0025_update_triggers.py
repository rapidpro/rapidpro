# Generated by Django 5.1.2 on 2024-11-05 15:08

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Determines the item count scope for a notification
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_notification_countscope(_notification notifications_notification) RETURNS TEXT STABLE AS $$
BEGIN
    RETURN format('notifications:%s:%s', _notification.user_id, CASE WHEN _notification.is_seen THEN 'S' ELSE 'U' END);
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles DELETE statements on notification table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_notification_on_delete() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO orgs_itemcount("org_id", "scope", "count", "is_squashed")
    SELECT org_id, temba_notification_countscope(oldtab), -count(*), FALSE FROM oldtab
    WHERE position('U' IN medium) > 0 GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles INSERT statements on notification table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_notification_on_insert() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO orgs_itemcount("org_id", "scope", "count", "is_squashed")
    SELECT org_id, temba_notification_countscope(newtab), count(*), FALSE FROM newtab
    WHERE position('U' IN medium) > 0 GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles UPDATE statements on notification table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_notification_on_update() RETURNS TRIGGER AS $$
BEGIN
    -- add negative counts for all old count scopes that don't match the new ones
    INSERT INTO orgs_itemcount("org_id", "scope", "count", "is_squashed")
    SELECT o.org_id, temba_notification_countscope(o), -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    WHERE position('U' IN o.medium) > 0 AND temba_notification_countscope(o) != temba_notification_countscope(n)
    GROUP BY 1, 2;

    -- add positive counts for all new count scopes that don't match the old ones
    INSERT INTO orgs_itemcount("org_id", "scope", "count", "is_squashed")
    SELECT n.org_id, temba_notification_countscope(n), count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    WHERE position('U' IN n.medium) > 0 AND temba_notification_countscope(o) != temba_notification_countscope(n)
    GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_notification_on_delete
AFTER DELETE ON notifications_notification REFERENCING OLD TABLE AS oldtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_notification_on_delete();

CREATE TRIGGER temba_notification_on_insert
AFTER INSERT ON notifications_notification REFERENCING NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_notification_on_insert();

CREATE TRIGGER temba_notification_on_update
AFTER UPDATE ON notifications_notification REFERENCING OLD TABLE AS oldtab NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_notification_on_update();

DROP FUNCTION extract_jsonb_keys(_jsonb JSONB);
"""


class Migration(migrations.Migration):

    dependencies = [
        ("notifications", "0024_notification_data_and_more"),
        ("orgs", "0156_itemcount"),
    ]

    operations = [migrations.RunSQL(SQL)]
