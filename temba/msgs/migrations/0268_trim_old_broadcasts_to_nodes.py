# Generated by Django 5.0.6 on 2024-07-16 18:39

from django.db import migrations
from django.db.models import Count

MAX_CONTACTS = 50


def trim_old_broadcasts_to_nodes(apps, schema_editor):  # pragma: no cover
    Broadcast = apps.get_model("msgs", "Broadcast")

    # find sent broadcasts to a lot of contacts that likely came from sending to a node in a flow
    bcasts = (
        Broadcast.objects.filter(status="S", schedule=None, parent=None)
        .annotate(num_contacts=Count("contacts"))
        .filter(num_contacts__gt=MAX_CONTACTS)
    )

    for bcast in bcasts:
        trim_broadcast_to_node(bcast)


def trim_broadcast_to_node(bcast):  # pragma: no cover
    through_model = bcast.contacts.through
    num_trimmed = 0

    while True:
        count = bcast.contacts.count()
        if count <= MAX_CONTACTS:
            break

        num_to_trim = min(count - MAX_CONTACTS, 1000)
        rel_ids = list(through_model.objects.filter(broadcast=bcast).values_list("id", flat=True)[:num_to_trim])
        through_model.objects.filter(id__in=rel_ids).delete()
        num_trimmed += len(rel_ids)

    print(f"Trimmed {num_trimmed} contacts from broadcast {bcast.id}")


class Migration(migrations.Migration):

    dependencies = [("msgs", "0267_broadcast_node_uuid")]

    operations = [migrations.RunPython(trim_old_broadcasts_to_nodes, migrations.RunPython.noop)]
