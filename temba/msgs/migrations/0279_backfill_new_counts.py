# Generated by Django 5.1.4 on 2024-12-11 14:19

import itertools

from django.db import migrations, transaction
from django.db.models import Sum


def backfill_folder_counts(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")

    org_ids = list(Org.objects.filter(is_active=True).order_by("id").values_list("id", flat=True))

    print(f"Backfilling msg folder counts for {len(org_ids)} orgs...")

    num_backfilled = 0

    for id_batch in itertools.batched(org_ids, 500):
        for org in Org.objects.filter(id__in=id_batch).only("id").order_by("id"):
            backfill_for_org(apps, org)

        num_backfilled += len(id_batch)
        print(f"> updated counts for {num_backfilled}/{len(org_ids)} orgs")


def backfill_for_org(apps, org) -> int:  # pragma: no cover
    ItemCount = apps.get_model("orgs", "ItemCount")

    with transaction.atomic():
        to_create = []

        def add_count(scope: str, count: int):
            if count > 0:
                to_create.append(ItemCount(org=org, scope=scope, count=count, is_squashed=True))

        by_segment = org.system_labels.values("label_type").annotate(total=Sum("count"))
        for count in by_segment:
            add_count(f"msgs:folder:{count['label_type']}", count["total"])

        org.counts.filter(scope__startswith="msgs:folder:").delete()
        ItemCount.objects.bulk_create(to_create)

        return len(to_create)


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_folder_counts(apps, None)


class Migration(migrations.Migration):

    dependencies = [("msgs", "0278_update_triggers")]

    operations = [migrations.RunPython(backfill_folder_counts, migrations.RunPython.noop)]
