# Generated by Django 4.0.7 on 2022-12-07 16:57

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles INSERT statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add status counts for all new status values
    INSERT INTO flows_flowrunstatuscount(flow_id, status, count, is_squashed)
    SELECT flow_id, status, count(*), FALSE FROM newtab GROUP BY flow_id, status;

    -- add start counts for all new start values
    INSERT INTO flows_flowstartcount(start_id, count, is_squashed)
    SELECT start_id, count(*), FALSE FROM newtab WHERE start_id IS NOT NULL GROUP BY start_id;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


----------------------------------------------------------------------
-- Handles insertion of flow runs
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_insert() RETURNS TRIGGER AS $$
DECLARE
    p INT;
    _path_json JSONB;
    _path_len INT;
BEGIN
    -- increment count for runs with this flow and status
    PERFORM temba_insert_flowrunstatuscount(NEW.flow_id, NEW.status, 1);

    -- increment node count at current node in this path if this is an active run
    IF NEW.status IN ('A', 'W') AND NEW.current_node_uuid IS NOT NULL THEN
        PERFORM temba_insert_flownodecount(NEW.flow_id, NEW.current_node_uuid, 1);
    END IF;

    -- nothing more to do if path is empty
    IF NEW.path IS NULL OR NEW.path = '[]' THEN RETURN NULL; END IF;

    -- parse path as JSON
    _path_json := NEW.path::json;
    _path_len := jsonb_array_length(_path_json);

    -- for each step in the path, increment the path count, and record a recent run
    p := 1;
    LOOP
        EXIT WHEN p >= _path_len;

        PERFORM temba_insert_flowpathcount(
            NEW.flow_id,
            UUID(_path_json->(p-1)->>'exit_uuid'),
            UUID(_path_json->p->>'node_uuid'),
            timestamptz(_path_json->p->>'arrived_on'),
            1
        );
        p := p + 1;
    END LOOP;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


DROP FUNCTION temba_insert_flowstartcount(INT, INT);
"""


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0305_convert_exit_type_counts"),
    ]

    operations = [migrations.RunSQL(SQL)]
