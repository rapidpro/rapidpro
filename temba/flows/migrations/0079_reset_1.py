# Generated by Django 1.10.5 on 2017-01-06 22:38

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import temba.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ActionLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField(help_text="Log event text")),
                (
                    "level",
                    models.CharField(
                        choices=[("I", "Info"), ("W", "Warning"), ("E", "Error")],
                        default="I",
                        help_text="Log event level",
                        max_length=1,
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, help_text="When this log event occurred")),
            ],
        ),
        migrations.CreateModel(
            name="ActionSet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.CharField(max_length=36, unique=True)),
                ("destination", models.CharField(max_length=36, null=True)),
                (
                    "destination_type",
                    models.CharField(choices=[("R", "RuleSet"), ("A", "ActionSet")], max_length=1, null=True),
                ),
                ("actions", models.TextField(help_text="The JSON encoded actions for this action set")),
                ("x", models.IntegerField()),
                ("y", models.IntegerField()),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this action was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this action was last modified")),
            ],
        ),
        migrations.CreateModel(
            name="ExportFlowResultsTask",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                ("task_id", models.CharField(max_length=64, null=True)),
                ("is_finished", models.BooleanField(default=False, help_text="Whether this export is complete")),
                (
                    "uuid",
                    models.CharField(
                        help_text="The uuid used to name the resulting export file", max_length=36, null=True
                    ),
                ),
                ("config", models.TextField(help_text="Any configuration options for this flow export", null=True)),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Flow",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this object",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                ("name", models.CharField(help_text="The name for this flow", max_length=64)),
                ("entry_uuid", models.CharField(max_length=36, null=True, unique=True)),
                (
                    "entry_type",
                    models.CharField(
                        choices=[("R", "Rules"), ("A", "Actions")],
                        help_text="The type of node this flow starts with",
                        max_length=1,
                        null=True,
                    ),
                ),
                ("is_archived", models.BooleanField(default=False, help_text="Whether this flow is archived")),
                (
                    "flow_type",
                    models.CharField(
                        choices=[
                            ("F", "Message flow"),
                            ("M", "Single Message Flow"),
                            ("V", "Phone call flow"),
                            ("S", "Android Survey"),
                            ("U", "USSD flow"),
                        ],
                        default="F",
                        help_text="The type of this flow",
                        max_length=1,
                    ),
                ),
                (
                    "metadata",
                    models.TextField(
                        blank=True,
                        help_text="Any extra metadata attached to this flow, strictly used by the user interface.",
                        null=True,
                    ),
                ),
                (
                    "expires_after_minutes",
                    models.IntegerField(
                        default=720, help_text="Minutes of inactivity that will cause expiration from flow"
                    ),
                ),
                (
                    "ignore_triggers",
                    models.BooleanField(default=False, help_text="Ignore keyword triggers while in this flow"),
                ),
                ("saved_on", models.DateTimeField(auto_now_add=True, help_text="When this item was saved")),
                (
                    "base_language",
                    models.CharField(
                        blank=True,
                        default="base",
                        help_text="The primary language for editing this flow",
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "version_number",
                    models.IntegerField(default=10, help_text="The flow version this definition is in"),
                ),
            ],
            options={"ordering": ("-modified_on",)},
        ),
        migrations.CreateModel(
            name="FlowLabel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this label",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The name of this flow label", max_length=64, verbose_name="Name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowPathCount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("from_uuid", models.UUIDField(help_text="Which flow node they came from")),
                ("to_uuid", models.UUIDField(help_text="Which flow node they went to", null=True)),
                ("period", models.DateTimeField(help_text="When the activity occured with hourly precision")),
                ("count", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="FlowRevision",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                ("definition", models.TextField(help_text="The JSON flow definition")),
                ("spec_version", models.IntegerField(default=10, help_text="The flow version this definition is in")),
                ("revision", models.IntegerField(help_text="Revision number for this definition", null=True)),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowRun",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this flow run is currently active"),
                ),
                (
                    "fields",
                    models.TextField(
                        blank=True,
                        help_text="A JSON representation of any custom flow values the user has saved away",
                        null=True,
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When this flow run was created"
                    ),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this flow run was last updated")),
                ("exited_on", models.DateTimeField(help_text="When the contact exited this flow run", null=True)),
                (
                    "exit_type",
                    models.CharField(
                        choices=[("C", "Completed"), ("I", "Interrupted"), ("E", "Expired")],
                        help_text="Why the contact exited this flow run",
                        max_length=1,
                        null=True,
                    ),
                ),
                ("expires_on", models.DateTimeField(help_text="When this flow run will expire", null=True)),
                (
                    "timeout_on",
                    models.DateTimeField(help_text="When this flow will next time out (if any)", null=True),
                ),
                (
                    "responded",
                    models.BooleanField(default=False, help_text="Whether contact has responded in this run"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowRunCount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "exit_type",
                    models.CharField(
                        choices=[("C", "Completed"), ("I", "Interrupted"), ("E", "Expired")], max_length=1, null=True
                    ),
                ),
                ("count", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="FlowStart",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this item was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this item was last modified")),
                (
                    "restart_participants",
                    models.BooleanField(
                        default=True, help_text="Whether to restart any participants already in this flow"
                    ),
                ),
                (
                    "contact_count",
                    models.IntegerField(default=0, help_text="How many unique contacts were started down the flow"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("P", "Pending"), ("S", "Starting"), ("C", "Complete"), ("F", "Failed")],
                        default="P",
                        help_text="The status of this flow start",
                        max_length=1,
                    ),
                ),
                (
                    "extra",
                    models.TextField(help_text="Any extra parameters to pass to the flow start (json)", null=True),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "step_type",
                    models.CharField(
                        choices=[("R", "RuleSet"), ("A", "ActionSet")],
                        help_text="What type of node was visited",
                        max_length=1,
                    ),
                ),
                (
                    "step_uuid",
                    models.CharField(
                        db_index=True, help_text="The UUID of the ActionSet or RuleSet for this step", max_length=36
                    ),
                ),
                (
                    "rule_uuid",
                    models.CharField(
                        help_text="For uuid of the rule that matched on this ruleset, null on ActionSets",
                        max_length=36,
                        null=True,
                    ),
                ),
                (
                    "rule_category",
                    models.CharField(
                        help_text="The category label that matched on this ruleset, null on ActionSets",
                        max_length=36,
                        null=True,
                    ),
                ),
                (
                    "rule_value",
                    models.CharField(
                        help_text="The value that was matched in our category for this ruleset, null on ActionSets",
                        max_length=640,
                        null=True,
                    ),
                ),
                (
                    "rule_decimal_value",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="The decimal value that was matched in our category for this ruleset, null on ActionSets or if a non numeric rule was matched",
                        max_digits=36,
                        null=True,
                    ),
                ),
                (
                    "next_uuid",
                    models.CharField(help_text="The uuid of the next step type we took", max_length=36, null=True),
                ),
                ("arrived_on", models.DateTimeField(help_text="When the user arrived at this step in the flow")),
                (
                    "left_on",
                    models.DateTimeField(
                        db_index=True, help_text="When the user left this step in the flow", null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RuleSet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.CharField(max_length=36, unique=True)),
                (
                    "label",
                    models.CharField(blank=True, help_text="The label for this field", max_length=64, null=True),
                ),
                (
                    "operand",
                    models.CharField(
                        blank=True,
                        help_text="The value that rules will be run against, if None defaults to @step.value",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "webhook_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL that will be called with the user's response before we run our rules",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "webhook_action",
                    models.CharField(
                        blank=True,
                        default="POST",
                        help_text="How the webhook should be executed",
                        max_length=8,
                        null=True,
                    ),
                ),
                ("rules", models.TextField(help_text="The JSON encoded actions for this action set")),
                (
                    "finished_key",
                    models.CharField(
                        blank=True,
                        help_text="During IVR, this is the key to indicate we are done waiting",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("T", "Text"),
                            ("N", "Numeric"),
                            ("D", "Date & Time"),
                            ("S", "State"),
                            ("I", "District"),
                            ("W", "Ward"),
                        ],
                        default="T",
                        help_text="The type of value this ruleset saves",
                        max_length=1,
                    ),
                ),
                (
                    "ruleset_type",
                    models.CharField(
                        choices=[
                            ("wait_message", "Wait for message"),
                            ("wait_menu", "Wait for USSD menu"),
                            ("wait_ussd", "Wait for USSD message"),
                            ("wait_recording", "Wait for recording"),
                            ("wait_digit", "Wait for digit"),
                            ("wait_digits", "Wait for digits"),
                            ("subflow", "Subflow"),
                            ("webhook", "Webhook"),
                            ("resthook", "Resthook"),
                            ("airtime", "Transfer Airtime"),
                            ("form_field", "Split by message form"),
                            ("contact_field", "Split on contact field"),
                            ("expression", "Split by expression"),
                            ("subflow", "Split Randomly"),
                        ],
                        help_text="The type of ruleset",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "response_type",
                    models.CharField(help_text="The type of response that is being saved", max_length=1),
                ),
                (
                    "config",
                    models.TextField(
                        help_text="RuleSet type specific configuration",
                        null=True,
                        verbose_name="Ruleset Configuration",
                    ),
                ),
                ("x", models.IntegerField()),
                ("y", models.IntegerField()),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this ruleset was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this ruleset was last modified")),
                (
                    "flow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="rule_sets", to="flows.Flow"
                    ),
                ),
            ],
        ),
    ]
