# Generated by Django 5.1.2 on 2024-11-27 18:58

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles INSERT statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add status counts for all new status values
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT flow_id, format('status:%s', status), count(*), FALSE FROM newtab GROUP BY 1, 2;

    -- add start counts for all new start values
    INSERT INTO flows_flowstartcount("start_id", "count", "is_squashed")
    SELECT start_id, count(*), FALSE FROM newtab WHERE start_id IS NOT NULL GROUP BY start_id;

    -- add node counts for all new current node values
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT flow_id, format('node:%s', current_node_uuid), count(*), FALSE FROM newtab
    WHERE status IN ('A', 'W') AND current_node_uuid IS NOT NULL GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles DELETE statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_delete() RETURNS TRIGGER AS $$
BEGIN
    -- add negative status counts for all rows being deleted manually
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT flow_id, format('status:%s', status), -count(*), FALSE FROM oldtab
    WHERE delete_from_results = TRUE GROUP BY 1, 2;

    -- add negative node counts for any runs sitting at a node
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT flow_id, format('node:%s', current_node_uuid), -count(*), FALSE FROM oldtab
    WHERE status IN ('A', 'W') AND current_node_uuid IS NOT NULL GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles UPDATE statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_update() RETURNS TRIGGER AS $$
BEGIN
    -- add negative status counts for all old status values that don't match the new ones
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT o.flow_id, format('status:%s', o.status), -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    WHERE o.status != n.status
    GROUP BY 1, 2;

    -- add status counts for all new status values that don't match the old ones
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT n.flow_id, format('status:%s', n.status), count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    WHERE o.status != n.status
    GROUP BY 1, 2;

    -- add negative node counts for all old current node values that don't match the new ones
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT o.flow_id, format('node:%s', o.current_node_uuid), -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    WHERE o.current_node_uuid IS NOT NULL AND o.status IN ('A', 'W') AND (o.current_node_uuid != n.current_node_uuid OR n.status NOT IN ('A', 'W'))
    GROUP BY 1, 2;

    -- add node counts for all new current node values that don't match the old ones
    INSERT INTO flows_flowactivitycount("flow_id", "scope", "count", "is_squashed")
    SELECT n.flow_id, format('node:%s', n.current_node_uuid), count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    WHERE n.current_node_uuid IS NOT NULL AND o.current_node_uuid != n.current_node_uuid AND n.status IN ('A', 'W')
    GROUP BY 1, 2;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
"""


class Migration(migrations.Migration):

    dependencies = [("flows", "0343_backfill_new_counts")]

    operations = [migrations.RunSQL(SQL)]
