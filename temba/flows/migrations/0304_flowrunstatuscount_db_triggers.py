# Generated by Django 4.0.7 on 2022-12-06 15:18

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles INSERT statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add status counts for all new status values
    INSERT INTO flows_flowrunstatuscount(flow_id, status, count, is_squashed)
    SELECT flow_id, status, count(*), FALSE FROM newtab GROUP BY flow_id, status;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_flowrun_on_insert
AFTER INSERT ON flows_flowrun REFERENCING NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_flowrun_on_insert();

----------------------------------------------------------------------
-- Handles UPDATE statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_update() RETURNS TRIGGER AS $$
BEGIN
    -- add negative status counts for all old status values that don't match the new ones
    INSERT INTO flows_flowrunstatuscount(flow_id, status, count, is_squashed)
    SELECT o.flow_id, o.status, -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    WHERE o.status != n.status
    GROUP BY o.flow_id, o.status;

    -- add status counts for all new status values that don't match the old ones
    INSERT INTO flows_flowrunstatuscount(flow_id, status, count, is_squashed)
    SELECT n.flow_id, n.status, count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    WHERE o.status != n.status
    GROUP BY n.flow_id, n.status;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_flowrun_on_update
AFTER UPDATE ON flows_flowrun REFERENCING OLD TABLE AS oldtab NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_flowrun_on_update();

----------------------------------------------------------------------
-- Handles DELETE statements on flowrun table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_on_delete() RETURNS TRIGGER AS $$
BEGIN
    -- add negative status counts for all rows being deleted manually
    INSERT INTO flows_flowrunstatuscount(flow_id, status, count, is_squashed)
    SELECT flow_id, status, -count(*), FALSE
    FROM oldtab WHERE delete_from_results = TRUE
    GROUP BY flow_id, status;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_flowrun_on_delete
AFTER DELETE ON flows_flowrun REFERENCING OLD TABLE AS oldtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_flowrun_on_delete();
"""


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0303_flowrunstatuscount"),
        ("sql", "0004_squashed"),
    ]

    operations = [migrations.RunSQL(SQL)]
