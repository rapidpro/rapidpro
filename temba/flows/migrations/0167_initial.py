# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-07-16 16:23
from __future__ import unicode_literals

import uuid

import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import temba.orgs.models
import temba.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("orgs", "0045_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contacts", "0084_initial"),
        ("channels", "0096_auto_20180716_1623"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActionLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField(help_text="Log event text")),
                (
                    "level",
                    models.CharField(
                        choices=[("I", "Info"), ("W", "Warning"), ("E", "Error")],
                        default="I",
                        help_text="Log event level",
                        max_length=1,
                    ),
                ),
                ("created_on", models.DateTimeField(help_text="When this log event occurred")),
            ],
        ),
        migrations.CreateModel(
            name="ActionSet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.CharField(max_length=36, unique=True)),
                ("destination", models.CharField(max_length=36, null=True)),
                ("destination_type", models.CharField(max_length=1, null=True)),
                ("exit_uuid", models.CharField(max_length=36, null=True)),
                (
                    "actions",
                    temba.utils.models.JSONAsTextField(
                        default=dict, help_text="The JSON encoded actions for this action set"
                    ),
                ),
                ("x", models.IntegerField()),
                ("y", models.IntegerField()),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this action was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this action was last modified")),
            ],
        ),
        migrations.CreateModel(
            name="ExportFlowResultsTask",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this object",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("P", "Pending"), ("O", "Processing"), ("C", "Complete"), ("F", "Failed")],
                        default="P",
                        max_length=1,
                    ),
                ),
                (
                    "config",
                    temba.utils.models.JSONAsTextField(
                        default=dict, help_text="Any configuration options for this flow export", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_exportflowresultstask_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Flow",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this object",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                ("name", models.CharField(help_text="The name for this flow", max_length=64)),
                ("entry_uuid", models.CharField(max_length=36, null=True, unique=True)),
                (
                    "entry_type",
                    models.CharField(
                        choices=[("R", "Rules"), ("A", "Actions")],
                        help_text="The type of node this flow starts with",
                        max_length=1,
                        null=True,
                    ),
                ),
                ("is_archived", models.BooleanField(default=False, help_text="Whether this flow is archived")),
                (
                    "flow_type",
                    models.CharField(
                        choices=[
                            ("F", "Message flow"),
                            ("M", "Single Message Flow"),
                            ("V", "Phone call flow"),
                            ("S", "Android Survey"),
                            ("U", "USSD flow"),
                        ],
                        default="F",
                        help_text="The type of this flow",
                        max_length=1,
                    ),
                ),
                (
                    "metadata",
                    temba.utils.models.JSONAsTextField(
                        blank=True,
                        default=dict,
                        help_text="Any extra metadata attached to this flow, strictly used by the user interface.",
                        null=True,
                    ),
                ),
                (
                    "expires_after_minutes",
                    models.IntegerField(
                        default=720, help_text="Minutes of inactivity that will cause expiration from flow"
                    ),
                ),
                (
                    "ignore_triggers",
                    models.BooleanField(default=False, help_text="Ignore keyword triggers while in this flow"),
                ),
                ("saved_on", models.DateTimeField(auto_now_add=True, help_text="When this item was saved")),
                (
                    "base_language",
                    models.CharField(
                        blank=True,
                        default="base",
                        help_text="The primary language for editing this flow",
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "version_number",
                    models.CharField(
                        default=temba.orgs.models.get_current_export_version,
                        help_text="The flow version this definition is in",
                        max_length=8,
                    ),
                ),
                (
                    "flow_server_enabled",
                    models.BooleanField(default=False, help_text="Run this flow using the flow server"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_flow_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "field_dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Any fields this flow depends on",
                        related_name="dependent_flows",
                        to="contacts.ContactField",
                        verbose_name="",
                    ),
                ),
                (
                    "flow_dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Any flows this flow uses",
                        related_name="dependent_flows",
                        to="flows.Flow",
                        verbose_name="Flow Dependencies",
                    ),
                ),
                (
                    "group_dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Any groups this flow uses",
                        related_name="dependent_flows",
                        to="contacts.ContactGroup",
                        verbose_name="Group Dependencies",
                    ),
                ),
            ],
            options={"ordering": ("-modified_on",)},
        ),
        migrations.CreateModel(
            name="FlowCategoryCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                ("node_uuid", models.UUIDField(db_index=True)),
                ("result_key", models.CharField(help_text="The sluggified key for the result", max_length=128)),
                ("result_name", models.CharField(help_text="The result the category belongs to", max_length=128)),
                ("category_name", models.CharField(help_text="The category name for a result", max_length=128)),
                ("count", models.IntegerField(default=0)),
                (
                    "flow",
                    models.ForeignKey(
                        help_text="The flow the result belongs to",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="category_counts",
                        to="flows.Flow",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowLabel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "uuid",
                    models.CharField(
                        db_index=True,
                        default=temba.utils.models.generate_uuid,
                        help_text="The unique identifier for this label",
                        max_length=36,
                        unique=True,
                        verbose_name="Unique Identifier",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The name of this flow label", max_length=64, verbose_name="Name"),
                ),
                ("org", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="orgs.Org")),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="flows.FlowLabel",
                        verbose_name="Parent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowNodeCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                ("node_uuid", models.UUIDField(db_index=True)),
                ("count", models.IntegerField(default=0)),
                ("flow", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="flows.Flow")),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowPathCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                ("from_uuid", models.UUIDField(help_text="Which flow node they came from")),
                ("to_uuid", models.UUIDField(help_text="Which flow node they went to")),
                ("period", models.DateTimeField(help_text="When the activity occured with hourly precision")),
                ("count", models.IntegerField(default=0)),
                (
                    "flow",
                    models.ForeignKey(
                        help_text="The flow where the activity occurred",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="activity",
                        to="flows.Flow",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowPathRecentRun",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("from_uuid", models.UUIDField(help_text="The flow node UUID of the first step")),
                ("from_step_uuid", models.UUIDField(help_text="The UUID of the first step")),
                ("to_uuid", models.UUIDField(help_text="The flow node UUID of the second step")),
                ("to_step_uuid", models.UUIDField(help_text="The UUID of the second step")),
                (
                    "visited_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When the run visited this path segment"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowRevision",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("definition", temba.utils.models.JSONAsTextField(default=dict, help_text="The JSON flow definition")),
                (
                    "spec_version",
                    models.CharField(
                        default=temba.orgs.models.get_current_export_version,
                        help_text="The flow version this definition is in",
                        max_length=8,
                    ),
                ),
                ("revision", models.IntegerField(help_text="Revision number for this definition", null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_flowrevision_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "flow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="revisions", to="flows.Flow"
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_flowrevision_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowRun",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this flow run is currently active"),
                ),
                (
                    "fields",
                    temba.utils.models.JSONAsTextField(
                        blank=True,
                        default=dict,
                        help_text="A JSON representation of any custom flow values the user has saved away",
                        null=True,
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When this flow run was created"
                    ),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this flow run was last updated")),
                ("exited_on", models.DateTimeField(help_text="When the contact exited this flow run", null=True)),
                (
                    "exit_type",
                    models.CharField(
                        choices=[("C", "Completed"), ("I", "Interrupted"), ("E", "Expired")],
                        help_text="Why the contact exited this flow run",
                        max_length=1,
                        null=True,
                    ),
                ),
                ("expires_on", models.DateTimeField(help_text="When this flow run will expire", null=True)),
                (
                    "timeout_on",
                    models.DateTimeField(help_text="When this flow will next time out (if any)", null=True),
                ),
                (
                    "responded",
                    models.BooleanField(default=False, help_text="Whether contact has responded in this run"),
                ),
                (
                    "parent_context",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="Context of the parent run that triggered us", null=True
                    ),
                ),
                (
                    "child_context",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="Context of the last child subflow triggered by us", null=True
                    ),
                ),
                (
                    "results",
                    temba.utils.models.JSONAsTextField(
                        default=dict, help_text="The results collected during this flow run in JSON format", null=True
                    ),
                ),
                (
                    "path",
                    temba.utils.models.JSONAsTextField(
                        default=list, help_text="The path taken during this flow run in JSON format", null=True
                    ),
                ),
                (
                    "events",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="The events recorded on this run in JSON format", null=True, verbose_name="Fields"
                    ),
                ),
                (
                    "current_node_uuid",
                    models.UUIDField(help_text="The current node location of this run in the flow", null=True),
                ),
                (
                    "delete_reason",
                    models.CharField(
                        choices=[(("A", "Archive delete"), ("U", "User delete"))],
                        help_text="Why the run is being deleted",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        blank=True,
                        help_text="The session that handled this flow run, only for voice flows",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="runs",
                        to="channels.ChannelSession",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="runs", to="contacts.Contact"
                    ),
                ),
                (
                    "flow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="runs", to="flows.Flow"
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        db_index=False, on_delete=django.db.models.deletion.PROTECT, related_name="runs", to="orgs.Org"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        help_text="The parent run that triggered us",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="flows.FlowRun",
                    ),
                ),
            ],
            bases=(temba.utils.models.RequireUpdateFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FlowRunCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                (
                    "exit_type",
                    models.CharField(
                        choices=[("C", "Completed"), ("I", "Interrupted"), ("E", "Expired")], max_length=1, null=True
                    ),
                ),
                ("count", models.IntegerField(default=0)),
                (
                    "flow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="counts", to="flows.Flow"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowSession",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("W", "Waiting"),
                            ("C", "Completed"),
                            ("I", "Interrupted"),
                            ("X", "Expired"),
                            ("F", "Failed"),
                        ],
                        help_text="The status of this session",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "responded",
                    models.BooleanField(default=False, help_text="Whether the contact has responded in this session"),
                ),
                ("output", temba.utils.models.JSONAsTextField(default=dict, null=True)),
                (
                    "connection",
                    models.OneToOneField(
                        help_text="The channel connection used for flow sessions over IVR or USSD",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="session",
                        to="channels.ChannelSession",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        help_text="The contact that this session is with",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="contacts.Contact",
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The organization this session belongs to",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="orgs.Org",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowStart",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "restart_participants",
                    models.BooleanField(
                        default=True, help_text="Whether to restart any participants already in this flow"
                    ),
                ),
                (
                    "include_active",
                    models.BooleanField(default=True, help_text="Include contacts currently active in flows"),
                ),
                (
                    "contact_count",
                    models.IntegerField(default=0, help_text="How many unique contacts were started down the flow"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("P", "Pending"), ("S", "Starting"), ("C", "Complete"), ("F", "Failed")],
                        default="P",
                        help_text="The status of this flow start",
                        max_length=1,
                    ),
                ),
                (
                    "extra",
                    temba.utils.models.JSONAsTextField(
                        default=dict, help_text="Any extra parameters to pass to the flow start (json)", null=True
                    ),
                ),
                (
                    "contacts",
                    models.ManyToManyField(help_text="Contacts that will start the flow", to="contacts.Contact"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_flowstart_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "flow",
                    models.ForeignKey(
                        help_text="The flow that is being started",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="starts",
                        to="flows.Flow",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(help_text="Groups that will start the flow", to="contacts.ContactGroup"),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="flows_flowstart_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="FlowStartCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_squashed",
                    models.BooleanField(default=False, help_text="Whether this row was created by squashing"),
                ),
                ("count", models.IntegerField(default=0)),
                (
                    "start",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="counts", to="flows.FlowStart"
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="RuleSet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.CharField(max_length=36, unique=True)),
                (
                    "label",
                    models.CharField(blank=True, help_text="The label for this field", max_length=64, null=True),
                ),
                (
                    "operand",
                    models.CharField(
                        blank=True,
                        help_text="The value that rules will be run against, if None defaults to @step.value",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "webhook_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL that will be called with the user's response before we run our rules",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "webhook_action",
                    models.CharField(
                        blank=True,
                        default="POST",
                        help_text="How the webhook should be executed",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rules",
                    temba.utils.models.JSONAsTextField(
                        default=list, help_text="The JSON encoded actions for this action set"
                    ),
                ),
                (
                    "finished_key",
                    models.CharField(
                        blank=True,
                        help_text="During IVR, this is the key to indicate we are done waiting",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("T", "Text"),
                            ("N", "Number"),
                            ("D", "Date & Time"),
                            ("S", "State"),
                            ("I", "District"),
                            ("W", "Ward"),
                        ],
                        default="T",
                        help_text="The type of value this ruleset saves",
                        max_length=1,
                    ),
                ),
                (
                    "ruleset_type",
                    models.CharField(
                        choices=[
                            ("wait_message", "Wait for message"),
                            ("wait_menu", "Wait for USSD menu"),
                            ("wait_ussd", "Wait for USSD message"),
                            ("wait_recording", "Wait for recording"),
                            ("wait_digit", "Wait for digit"),
                            ("wait_digits", "Wait for digits"),
                            ("subflow", "Subflow"),
                            ("webhook", "Webhook"),
                            ("resthook", "Resthook"),
                            ("airtime", "Transfer Airtime"),
                            ("form_field", "Split by message form"),
                            ("contact_field", "Split on contact field"),
                            ("expression", "Split by expression"),
                            ("random", "Split Randomly"),
                        ],
                        help_text="The type of ruleset",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "response_type",
                    models.CharField(help_text="The type of response that is being saved", max_length=1),
                ),
                (
                    "config",
                    temba.utils.models.JSONAsTextField(
                        default=dict,
                        help_text="RuleSet type specific configuration",
                        null=True,
                        verbose_name="Ruleset Configuration",
                    ),
                ),
                ("x", models.IntegerField()),
                ("y", models.IntegerField()),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, help_text="When this ruleset was originally created"),
                ),
                ("modified_on", models.DateTimeField(auto_now=True, help_text="When this ruleset was last modified")),
                (
                    "flow",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="rule_sets",
                        to="flows.Flow",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="flowrun",
            name="session",
            field=models.ForeignKey(
                help_text="The session that handled this flow run, only for voice flows",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="runs",
                to="flows.FlowSession",
            ),
        ),
        migrations.AddField(
            model_name="flowrun",
            name="start",
            field=models.ForeignKey(
                blank=True,
                help_text="The FlowStart objects that started this run",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="runs",
                to="flows.FlowStart",
            ),
        ),
        migrations.AddField(
            model_name="flowrun",
            name="submitted_by",
            field=models.ForeignKey(
                db_index=False,
                help_text="The user which submitted this flow run",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="flowpathrecentrun",
            name="run",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="recent_runs", to="flows.FlowRun"
            ),
        ),
        migrations.AddField(
            model_name="flow",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                help_text="Any labels on this flow",
                related_name="flows",
                to="flows.FlowLabel",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="flow",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="flows_flow_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="flow",
            name="org",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name="flows", to="orgs.Org"),
        ),
        migrations.AddField(
            model_name="flow",
            name="saved_by",
            field=models.ForeignKey(
                help_text="The user which last saved this flow",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="flow_saves",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="exportflowresultstask",
            name="flows",
            field=models.ManyToManyField(help_text="The flows to export", related_name="exports", to="flows.Flow"),
        ),
        migrations.AddField(
            model_name="exportflowresultstask",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="flows_exportflowresultstask_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="exportflowresultstask",
            name="org",
            field=models.ForeignKey(
                help_text="The organization of the user.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="exportflowresultstasks",
                to="orgs.Org",
            ),
        ),
        migrations.AddField(
            model_name="actionset",
            name="flow",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="action_sets", to="flows.Flow"
            ),
        ),
        migrations.AddField(
            model_name="actionlog",
            name="run",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="logs", to="flows.FlowRun"
            ),
        ),
        migrations.AlterIndexTogether(name="flowruncount", index_together=set([("flow", "exit_type")])),
        migrations.AddIndex(
            model_name="flowpathrecentrun",
            index=models.Index(fields=["from_uuid", "to_uuid", "-visited_on"], name="flows_flowp_from_uu_f5dc27_idx"),
        ),
        migrations.AlterIndexTogether(
            name="flowpathcount", index_together=set([("flow", "from_uuid", "to_uuid", "period")])
        ),
        migrations.AlterUniqueTogether(name="flowlabel", unique_together=set([("name", "parent", "org")])),
    ]
