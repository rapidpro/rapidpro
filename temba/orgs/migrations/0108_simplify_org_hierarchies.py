# Generated by Django 4.0.7 on 2022-11-09 17:22

from django.db import migrations


def simplify_org_hierarchies(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")

    def find_ancestor(o: Org) -> Org:
        if not o.parent:
            return o
        return find_ancestor(o.parent)

    for org in Org.objects.exclude(parent=None).only("id", "name", "parent").select_related("parent"):
        old_parent = org.parent
        new_parent = find_ancestor(org)
        if new_parent != old_parent:
            org.parent = new_parent
            org.save(update_fields=("parent",))
            print(
                f"Updated '{org.name}' #{org.id} with parent '{old_parent.name}' #{old_parent.id} "
                f"to have new parent '{new_parent.name}' #{new_parent.id}"
            )


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    simplify_org_hierarchies(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("orgs", "0107_remove_topup_created_by_remove_topup_modified_by_and_more"),
    ]

    operations = [migrations.RunPython(simplify_org_hierarchies, reverse)]
