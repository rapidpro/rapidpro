# Generated by Django 1.11.6 on 2018-03-12 14:10

import json
import time

from django_redis import get_redis_connection

from django.db import connection, migrations, transaction
from django.db.models import Prefetch
from django.utils import timezone

from temba.utils import chunk_list, format_number

# our migration keys expire after 7 days
EXPIRATION = 3600 * 24 * 7


def strip_last_path(path):
    parts = path.split(" > ")
    return " > ".join(parts[:-1])


def build_json_value(org, cf, value):
    json_value = {"text": value.string_value}

    if value.datetime_value is not None:
        localized = timezone.localtime(value.datetime_value, org.timezone)
        json_value["datetime"] = localized.isoformat()

    if value.decimal_value is not None:
        json_value["number"] = format_number(value.decimal_value)

    if value.location_value is not None:
        loc = value.location_value

        if loc.level == 1:
            json_value["state"] = loc.path

        elif loc.level == 2:
            json_value["district"] = loc.path
            json_value["state"] = strip_last_path(loc.path)

        elif loc.level == 3:
            json_value["ward"] = loc.path
            json_value["district"] = strip_last_path(loc.path)
            json_value["state"] = strip_last_path(json_value["district"])

    return {str(cf.uuid): json_value}


def backfill_contact_fields(Org, Contact, ContactField, Value):
    r = get_redis_connection()

    max_id = r.get("cf_max_id")
    if max_id is None:
        max_id = Contact.objects.all().order_by("-pk").first()
        if max_id is not None:
            max_id = max_id.id
        else:
            max_id = 0
        r.setex("cf_max_id", EXPIRATION, max_id)
    max_id = int(max_id)

    # get the last id we migrated
    last_id = r.get("cf_last_id")
    if last_id is None:
        last_id = 0
    last_id = int(last_id)

    # we preselect all contact fields and create a map by id
    cfs = {}
    for cf in ContactField.objects.only("id", "key", "uuid", "is_active"):
        cfs[cf.id] = cf

    # we also preselect all orgs so we know their timezone
    orgs = {}
    for org in Org.objects.all():
        orgs[org.id] = org

    contact_values = Value.objects.exclude(contact_field=None).prefetch_related("location_value")

    start = time.time()
    processed = 1

    # 100 contacts at a time, select a contact and all its values
    for batch in chunk_list(range(last_id, max_id + 1), 100):
        # we batch 100 contacts at a time in a transaction to reduce number of writes
        with transaction.atomic():
            # select the contacts and all set contact fields
            contacts = (
                Contact.objects.filter(id__in=batch)
                .prefetch_related(Prefetch("values", queryset=contact_values, to_attr="contact_values"))
                .order_by("id")
            )

            # for each contact, build our expression to update all the appropriate fields
            for contact in contacts:
                json_fields = []

                org = orgs.get(contact.org_id)
                if org is None:
                    org = Org.objects.get(contact.org_id)
                    orgs[org.id] = org

                for value in contact.contact_values:
                    cf = cfs.get(value.contact_field_id)

                    # its possible this is a new field, try to look it up
                    if cf is None:
                        cf = ContactField.objects.get(id=value.contact_field_id).only("id", "key", "uuid")
                        cfs[cf.id] = cf

                    # not active? don't write this
                    if not cf.is_active:
                        continue

                    # otherwise, build up our JSON value
                    json_fields.append(json.dumps(build_json_value(org, cf, value)))

                # write our fields in a single update for this contact
                if json_fields:
                    field_sql = " ".join(["|| %s::jsonb" for i in range(len(json_fields))])
                    update_sql = (
                        "UPDATE contacts_contact SET fields = COALESCE(fields, '{}'::jsonb) "
                        + field_sql
                        + " WHERE id = %s"
                    )
                    update_sql_fields = json_fields + [contact.id]
                    with connection.cursor() as cursor:
                        cursor.execute(update_sql, update_sql_fields)

                last_id = contact.id
                processed += 1

        r.setex("cf_last_id", EXPIRATION, last_id)
        chunk_rate = (time.time() - start) / float(processed)
        remaining = (max_id - last_id) * chunk_rate
        if last_id > 0:
            print("** %d / %d contacts migrated - ~ %d mins remaining" % (last_id, max_id, remaining / 60))


def apply_manual():
    from temba.orgs.models import Org
    from temba.contacts.models import Contact, ContactField
    from temba.values.models import Value

    backfill_contact_fields(Org, Contact, ContactField, Value)


def apply_as_migration(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    Contact = apps.get_model("contacts", "Contact")
    ContactField = apps.get_model("contacts", "ContactField")
    Value = apps.get_model("values", "Value")
    backfill_contact_fields(Org, Contact, ContactField, Value)


def clear_migration(apps, schema_editor):
    r = get_redis_connection()
    r.delete("cf_last_id")
    r.delete("cf_max_id")


class Migration(migrations.Migration):

    dependencies = [
        ("contacts", "0072_contact_fields"),
        ("values", "0013_remove_nones"),
        ("orgs", "0039_auto_20180202_1234"),
    ]

    operations = [migrations.RunPython(apply_as_migration, clear_migration)]
